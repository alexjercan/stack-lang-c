-- This is the standard library of `stack`.

const STDIN 0
const STDOUT 1
const STDERR 2

-- BASE FUNCTIONS

-- duplicate first 2 elements of the stack
func dup2 (a, b) (a, b, a, b) in
    swp dup rot dup rot'
end

-- pop the first 2 elements of the stack
func pop2 (a, b) () in
    pop pop
end

-- duplicate first 3 elements of the sack
func dup3 (a, b, c) (a, b, c, a, b, c) in
    rot dup rot4'
    rot dup rot4'
    rot dup rot4'
end

-- pop the first 3 eleemnts of the stack
func pop3 (a, b, c) () in
    pop pop pop
end

-- rotate 3 elements counter clockwise
func rot' (a, b, c) (c, a, b) in rot rot end

-- rotate 4 elements counter clockwise
func rot4' (a, b, c, d) (d, a, b, c) in rot4 rot4 rot4 end

-- DATA PTR

const ptr.null 0 int.& ptr.*

func ptr.= (ptr, ptr) (bool) in
    match p1 p2 in p1 ptr.& int.* p2 ptr.& int.* = end
end

func ptr.realloc (ptr, int, int) (ptr) in -- src, osz, sz
    dup2 > if -- src, osz, sz
        pop2
    else
        ptr.alloc -- src, osz, dst
        rot' -- dst, src, osz
        ptr.@ -- dst
    fi -- ptr
end

func ptr.memcmp (ptr, ptr, int) (int) in -- s1, s2, n
    0 rot4' while -- acc, s1, s2, n
        dup 0 > loop -- acc, s1, s2, n
        match _acc s1 s2 n in
            s1 byte.init s2 byte.init - -- b1-b2
            dup 0 = if
                s1 1 ptr.+
                s2 1 ptr.+
                n 1 -
            else
                s1 s2 0
            fi -- acc, s1, s2, n
        end
    pool -- acc, s1, s2, n
    pop3
end

func ptr.strlen (ptr) (int) in
    0 swp while
        dup byte.init BYTE_NULL = not loop
        1 ptr.+ swp 1 + swp
    pool
    pop
end

-- DATA INT

func abs (int) (int) in
    dup 0 < if 0 swp - fi
end

func mod (int, int) (int) in
    dup rot' % dup 0 < if + else swp pop fi
end

func digit.show (int) (string) in
    dup 0 = if pop "0" else
    dup 1 = if pop "1" else
    dup 2 = if pop "2" else
    dup 3 = if pop "3" else
    dup 4 = if pop "4" else
    dup 5 = if pop "5" else
    dup 6 = if pop "6" else
    dup 7 = if pop "7" else
    dup 8 = if pop "8" else
    dup 9 = if pop "9" else pop ""
    fi fi fi fi fi fi fi fi fi fi
end

func int.show (int) (string) in
    dup 0 = if pop "0"
    else
        "" swp while -- str, int
            dup 0 > loop
            match s n in
                n 10 mod digit.show s string.concat  -- str
                n 10 / -- str, int
            end
        pool
        pop
    fi
end

func int.read (string) (int, bool) in
    match s in
        s string.len 0 <= if
            0 true
        else
            0 0 true while
                match i ok in
                    i ok i s string.len < ok and
                end loop
                match r i ok in
                    s i string.!!
                    dup byte.isdigit if
                        BYTE_0 -  r 10 * + i 1 + ok
                    else
                        i 1 + false
                    fi
                end
            pool

            swp pop
        fi
    end
end

-- DATA BOOL

func <= (int, int) (bool) in
    dup2 < if pop2 true else = fi
end

func >= (int, int) (bool) in
    dup2 > if pop2 true else = fi
end

func not (bool) (bool) in
    if false else true fi
end

func and (bool, bool) (bool) in
    if else pop false fi
end

func or (bool, bool) (bool) in
    if pop true else fi
end

-- DATA STRING
data string (int len, ptr str)

-- compute how much memory you need to allocate for the string ptr
-- taking into account memory alignment by 8
func string.memory-needed (int) (int) in -- sz
    7 + 8 / 8 *
end

func string.init.cstr (ptr) (string) in
    dup ptr.strlen -- ptr, int
    swp string.init
end

func string.concat (string, string) (string) in -- s1, s2
    match s1 s2 in
        s1 string.len s2 string.len + -- L
        dup string.memory-needed ptr.alloc -- L, ptr
        s1 string.str s1 string.len ptr.@ -- L, ptr
        dup s1 string.len ptr.+ -- L, ptr, ptr+L1
        s2 string.str s2 string.len ptr.@ -- L, ptr, ptr+L1
        pop -- L, ptr
        string.init
    end
end

func string.substr (string, int, int) (string) in -- s, i, n
    match s1 i n in
        n string.memory-needed ptr.alloc -- ptr
        s1 string.str i ptr.+ -- ptr, str+i
        n -- ptr, str+i, n
        ptr.@ -- ptr
        n swp string.init
    end
end

func string.repeat (string, int) (string) in -- s, n
    match s n in
        "" 0 while -- result, i
            dup n < loop -- result, i
            match r i in
                r s string.concat
                i 1 +
            end
        pool -- result, i
        pop
    end
end

func string.!! (string, int) (int) in -- s, i
    swp -- i, s
    string.str swp ptr.+ -- str+i
    byte.init -- byte
end

func string.= (string, string) (bool) in -- s1, s2
    dup2 string.len swp string.len swp -- s1, s2, L1, L2
    dup rot' = if -- s1, s2, L
        rot' string.str swp string.str swp rot -- s1.str, s2.str, L
        ptr.memcmp -- int
        0 = -- bool
    else
        pop3 false
    fi -- bool
end

func string.starts_with (string, string) (bool) in -- string, pre
    dup2 -- string, pre, string, pre
    string.len swp string.len -- string, pre, pre.L, string.L
    > if --string, pre
        pop2 false
    else
        dup2 -- string, pre, string, pre
        string.len -- string, pre, string, L
        0 swp -- string, pre, string, 0, L
        string.substr -- string, pre, pre'
        string.= -- string, ok
        swp pop -- ok
    fi
end

func string.split_at (string, int) (string, string) in -- string, i
    dup2 -- string, i, string, i
    swp string.len -- string, i, i, L
    > if -- string, i
        pop ""
    else
        dup2 -- string, i, string, i
        0 swp string.substr -- string, i, prefix
        rot' dup2 -- prefix, string, i, string, i
        swp string.len -- prefix, string, i, i, L
        swp - -- prefix, string, i, L-i
        string.substr -- prefix, suffix
    fi
end

func string.index (string, string) (int, bool) in -- haystack, needle
    match s sep in
        0 true while -- i, run
            match i ok in i ok i s string.len < ok and end loop -- i, run
            match i ok in
                s i string.split_at -- prefix, suffix
                swp pop -- suffix
                sep string.starts_with if
                    i false
                else
                    i 1 + true
                fi
            end
        pool -- i, run
        not -- i, found
    end
end

func string.split (string, string) (string, string) in -- string, sep
    match s sep in
        s sep string.index not if
            pop s ""
        else
            s swp string.split_at -- prefix, suffix
            sep string.len -- prefix, suffix, L'
            string.split_at -- prefix, sep, suffix'
            swp pop -- prefix, rest
        fi
    end
end

func string.stdin () (string) in -- ()
    STDIN stdlib.fread.<eof> -- s, ok
    unwrap -- s
end

func string.stdout (string) () in -- s
    STDOUT swp stdlib.fwrite -- bool
    unwrap
end

func string.stderr (string) () in -- s
    STDERR swp stdlib.fwrite -- bool
    unwrap
end

-- SYSCALLS

func sys.read (int, ptr, int) (int) in 0 syscall3 end
func sys.write (int, ptr, int) (int) in 1 syscall3 end
func sys.open (ptr, int, int) (int) in 2 syscall3 end
func sys.close (int) (int) in 3 syscall1 end
func sys.exit (int) () in 60 syscall1 pop end

const O_RDONLY 0
const O_WRONLY 1
const O_RDWR   2
const O_CREAT  64

const O_0644   420

-- STDLIB

const stdlib.MAX_LINE 1024

const abort 1 sys.exit

const here -- () (string)
    __file__ ":" string.concat __line__ int.show string.concat ":" string.concat __col__ int.show string.concat ": " string.concat

const panic -- () ()
    here "panic!\n" string.concat STDERR swp stdlib.fwrite pop abort

const unwrap -- (ok) ()
    not if panic fi

const todo -- () ()
    here "todo!\n" string.concat STDERR swp stdlib.fwrite pop abort

func stdlib.fopen (string, string) (int, bool) in -- fn, md
    swp string.str swp
    dup "r" string.= if -- fn, md
        pop O_RDONLY O_0644 sys.open true
    else dup "w" string.= if -- fn, md
        pop O_WRONLY O_CREAT | O_0644 sys.open true
    else
        pop2 0 false
    fi fi -- int, ok
end

func stdlib.fclose (int) (bool) in -- fd
    sys.close 0 =
end

func stdlib.fread (int, int) (string, bool) in -- fd, L
    match fd L in
        L string.memory-needed ptr.alloc -- ptr
        dup fd swp L  -- ptr, fd, ptr, L
        sys.read -- ptr, L
        dup -- ptr, L, L
        0 < if -- ptr, L
            pop2 "" false
        else
            swp string.init true
        fi -- s, ok
    end
end

func stdlib.fread.<eof> (int) (string, bool) in -- fd
    match fd in
        fd stdlib.MAX_LINE stdlib.fread -- s, ok
        not if -- s
            pop "" false
        else
            dup string.len -- s, L
            dup 0 <= if -- s, L
                pop2 "" false
            else stdlib.MAX_LINE >= if -- s
                fd stdlib.fread.<eof> -- s1, s2, ok
                not if -- s1, s2
                    pop2 "" false
                else
                    string.concat true
                fi -- s, ok
            else -- s
                true
            fi fi -- s, ok
        fi -- s, ok
    end
end

func stdlib.fwrite (int, string) (bool) in -- fd, s
    dup string.str -- fd, s, ptr
    swp string.len -- fd, ptr, L
    sys.write -- int
    0 >= -- bool
end

-- DATA ARRAY
data array (int capacity, int count, int sz, ptr items)

const array.SIZE 32

func array.init.with_sz (int) (array) in -- sz
    0 0 0 int.& -- sz, C, L, xs
    rot4 swp -- C, L, sz, xs

    array.init
end

func array.get (array, int) (ptr, bool) in -- a, i
    match xs i in
        xs array.count i <= if
            ptr.null false
        else
            xs array.items -- ptr
            xs array.sz -- ptr, sz
            i * -- ptr, i*sz
            ptr.+ -- ptr+i*sz
            true
        fi -- ptr, ok
    end
end

func array.copy (array) (array, bool) in -- a
    dup array.sz -- a, sz
    array.init.with_sz -- a, dst
    dup rot -- dst, dst, a
    array.extend -- dst
end

func array.last (array) (ptr, bool) in -- a
    dup array.count -- a, L
    dup 0 <= if -- a, L
        pop2 0 int.& false
    else
        1 - -- a, L-1
        array.get
    fi -- ptr, bool
end

func array.pop (array) (bool) in -- a
    dup array.count -- a, L
    dup 0 <= if -- a, L
        pop2 false
    else
        1 - -- a, L-1
        array.delete
    fi -- bool
end

func array.= (array, array) (bool) in -- xs, ys
    match xs ys in
        xs array.count ys array.count = if
            xs array.items -- xs.items
            ys array.items -- xs.items, ys.items
            xs array.count -- xs.items, ys.items, L
            ptr.memcmp 0 = -- ok
        else
            false
        fi
    end
end

func array.insert (array, int, ptr) (bool) in -- dst, i, item
    match dst i item in
        dst array.sz array.init.with_sz -- array
        dup item array.append if -- array
            dst i rot -- dst i array
            array.insert_many
        else pop false fi -- ok
    end
end

func array.insert_many (array, int, array) (bool) in
    match dst i src in
        i dst array.count <= if
            -- Resize dst array to fit src items too
            dst array.capacity src array.capacity match C C' in
                dst array.items -- dst
                C dst array.sz * -- dst, C*sz
                C C' + dst array.sz * -- dst, C*sz, C''*sz
                ptr.realloc -- dst
                dst swp array.items.set -- ()
                C C' + -- C''
                dst swp array.capacity.set
            end

            -- 1. Copy dest to tmp
            dst array.count i - dst array.sz * ptr.alloc -- tmp
            dst array.items i dst array.sz * ptr.+ -- tmp, dst+i*sz
            dst array.count i - dst array.sz * -- tmp, dst+i*sz, (L-i)*sz
            ptr.@ -- tmp

            -- 2. Copy tmp to dest+
            dst array.items src array.count i + src array.sz * ptr.+ -- tmp, dst+(i+L')*sz
            swp -- dst+(i+L')*sz, tmp
            dst array.count i - dst array.sz * -- dst+(i+L')*sz, tmp, (L-i)*sz
            ptr.@ pop -- ()

            -- 3. Copy src to dest-
            dst array.items i dst array.sz * ptr.+ -- dst+i*sz
            src array.items -- dst+i*sz, src
            src array.count src array.sz * -- dst+i*sz, src, L'*sz
            ptr.@ pop -- ()

            -- Set the new count
            dst array.count src array.count + -- L''
            dst swp array.count.set -- ()

            true
        else false fi
    end
end

func array.delete (array, int) (bool) in -- a, i
    match xs i in
        i xs array.count < if
            xs array.items i xs array.sz * ptr.+ -- ptr+i*sz
            xs array.items i 1 + xs array.sz * ptr.+ -- ptr+i*sz, ptr+(i+1)*sz
            xs array.count i - 1 - xs array.sz *  -- ptr+i*sz, ptr+(i+1)*sz (L-i-1)*sz
            ptr.@ pop -- ()

            xs array.count 1 - -- L-1
            xs swp array.count.set -- ()

            true
        else false fi
    end
end

func array.extend (array, array) (bool) in -- xs, xs'
    match dst src in dst dst array.count src array.insert_many end
end

func array.append (array, ptr) (bool) in -- a, ptr
    swp -- ptr, a
    dup array.count -- ptr, a, L
    swp dup array.capacity -- ptr, L, a, C
    rot <= if -- ptr, a
        dup array.capacity -- ptr, a, C
        dup 2 * -- ptr, a, C, C*2
        dup 0 <= if -- ptr, a, C, C*2
            pop array.SIZE -- ptr, a, int
        fi -- ptr, a, C, nC

        rot swp dup2 -- ptr, C, a, nC, a, nC
        array.capacity.set -- ptr, C, a, nC

        swp dup array.sz -- ptr, C, nC, a, sz
        rot4 * -- ptr, nC, a, sz*C
        swp dup array.sz -- ptr, nC, sz*C, a, sz
        rot4 * -- ptr, sz*C, a, sz*nC
        swp dup array.items -- ptr, sz*C, sz*nC, a, a.ptr
        rot4 rot4 -- ptr, a, a.ptr, sz*C, sz*nC
        ptr.realloc -- ptr, a, a.ptr'
        swp dup rot -- ptr, a, a, a.ptr'
        array.items.set -- ptr, a
    fi -- ptr, a

    dup array.count -- ptr, a, L
    dup2 -- ptr, a, L, a, L
    swp dup array.sz -- ptr, a, L, L, a, sz
    rot * -- ptr, a, L, a, L*sz
    swp array.items swp ptr.+ -- ptr, a, L, xs+L*sz
    rot4 rot4 -- L, xs+L*sz, ptr, a
    dup array.sz swp rot4' -- L, a, xs+L*sz, ptr, sz
    ptr.@ pop -- L, a
    swp -- a, L
    1 + -- a, L+1
    array.count.set true -- bool
end

func array.swap (array, int, int) () in
    match xs i j in
        xs array.sz ptr.alloc -- tmp
        xs i array.get unwrap -- tmp, fst
        dup2 xs array.sz ptr.@ pop -- tmp, fst
        xs j array.get unwrap -- tmp, fst, snd
        dup2 xs array.sz ptr.@ pop -- tmp, fst, snd
        swp pop swp -- snd, tmp
        xs array.sz ptr.@ pop -- ()
    end
end

func array.sort<int> (array) () in
    match xs in
        0 while -- i
            dup xs array.count < loop -- i

            dup 1 + while -- i, j
            dup xs array.count < loop -- i, j
                match i j in
                    xs i array.get unwrap int.* -- x
                    xs j array.get unwrap int.* -- y
                    - 0 > if xs i j array.swap fi
                    i j 1 +
                end
            pool -- i, j

            pop 1 +
        pool -- i

        pop
    end
end

-- DATA BYTE is a subdata of int

const BYTE_NULL 0
const BYTE_\T 9
const BYTE_\N 10
const BYTE_EOF 26
const BYTE_SPACE 32
const BYTE_! 33
const BYTE_QUOTE 34
const BYTE_# 35
const BYTE_$ 36
const BYTE_% 37
const BYTE_& 38
const BYTE_' 39
const BYTE_LPAREN 40
const BYTE_RPAREN 41
const BYTE_* 42
const BYTE_+ 43
const BYTE_COMMA 44
const BYTE_- 45
const BYTE_. 46
const BYTE_/ 47
const BYTE_0 48
const BYTE_9 57
const BYTE_: 58
const BYTE_; 59
const BYTE_< 60
const BYTE_= 61
const BYTE_> 62
const BYTE_? 63
const BYTE_@ 64
const BYTE_A 65
const BYTE_Z 90
const BYTE_[ 91
const BYTE_\ 92
const BYTE_] 93
const BYTE_^ 94
const BYTE__ 95
const BYTE_` 96
const BYTE_a 97
const BYTE_b 98
const BYTE_f 102
const BYTE_n 110
const BYTE_t 116
const BYTE_z 122
const BYTE_{ 123
const BYTE_| 124
const BYTE_} 125
const BYTE_~ 126

func byte.ispunct' (int) (bool) in -- chr
    dup BYTE_! = swp
    dup BYTE_# = swp
    dup BYTE_$ = swp
    dup BYTE_% = swp
    dup BYTE_& = swp
    dup BYTE_' = swp
    dup BYTE_* = swp
    dup BYTE_+ = swp
    dup BYTE_- = swp
    dup BYTE_. = swp
    dup BYTE_/ = swp
    dup BYTE_: = swp
    dup BYTE_; = swp
    dup BYTE_< = swp
    dup BYTE_= = swp
    dup BYTE_> = swp
    dup BYTE_? = swp
    dup BYTE_@ = swp
    dup BYTE_[ = swp
    dup BYTE_\ = swp
    dup BYTE_] = swp
    dup BYTE_^ = swp
    dup BYTE__ = swp
    dup BYTE_` = swp
    dup BYTE_{ = swp
    dup BYTE_| = swp
    dup BYTE_} = swp
    dup BYTE_~ = swp pop
    or or or or or or or or or or or or or or or or or or or or or or or or or or or
end

func byte.init (ptr) (int) in -- chr*
    int.sizeof ptr.alloc -- str, ptr
    dup rot' swp 1 ptr.@ pop -- ptr
    int.* -- byte
end

func byte.isdigit (int) (bool) in -- chr
    dup BYTE_0 >= swp BYTE_9 <= and
end

func byte.isupper (int) (bool) in -- chr
    dup BYTE_A >= swp BYTE_Z <= and
end

func byte.islower (int) (bool) in -- chr
    dup BYTE_a >= swp BYTE_z <= and
end

func byte.isletter (int) (bool) in -- chr
    dup byte.isupper swp byte.islower or
end

func byte.isalnum (int) (bool) in -- chr
    dup byte.isdigit swp byte.isletter or
end

func byte.isspace (int) (bool) in -- chr
    dup BYTE_\T = swp -- bool i
    dup BYTE_\N = swp -- bool bool i
    dup BYTE_SPACE = swp -- bool bool bool i
    pop or or -- bool
end

func byte.isname (int) (bool) in -- chr
    dup byte.isalnum swp byte.ispunct' or
end

func byte.chr (int) (string) in -- chr
    int.& -- &int
    1 string.memory-needed ptr.alloc -- &int, ptr
    swp 1 ptr.@ -- ptr
    1 swp string.init -- ptr
end

-- OS

func os.env.get' (int, string) (string, bool) in -- i, string
    swp dup 8 * -- string, i, i*8
    os.env swp ptr.+ -- string, i, ptr+i*8

    dup -- string, i, ptr+i*8, ptr+i*8
    int.* -- string, i, ptr+i*8, int

    0 = if -- string, i, ptr+i*8
        pop3 "" false
    else
        ptr.* -- string, i, ptr[i*8]

        string.init.cstr -- string, i, env
        "=" string.split -- string, i, name, value

        swp -- string, i, value, name
        rot4 dup rot -- i, value, string, string, name
        string.= if -- i, value, string
            pop swp pop true
        else
            swp pop -- i, string
            swp 1 + swp os.env.get'
        fi
    fi
end

func os.env.get (string) (string, bool) in
    0 swp os.env.get'
end
