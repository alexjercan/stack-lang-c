format ELF64

section '.data' writeable

; memory layout
stack_pos dq 0
stack_end dq 0
heap_pos dq 0
heap_end dq 0

section '.text' executable

;
;
; allocator_init
;
;   INPUT: nothing
;   OUTPUT: nothing
allocator_init:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; allocate the stack 64K
    mov     rax, 12                    ; brk
    mov     rdi, 0                     ; increment = 0
    syscall
    mov     [stack_pos], rax           ; save the current position of the stack
    mov     [stack_end], rax           ; save the end of the stack

    mov     rax, 12                    ; brk
    mov     rdi, 0x10000               ; 64K bytes (larger obj. will fail)
    add     rdi, [stack_end]           ; new end of the stack
    syscall

    ; initialize the heap
    mov     rax, 12                    ; brk
    mov     rdi, 0                     ; increment = 0
    syscall
    mov     [heap_pos], rax            ; save the current position of the heap
    mov     [heap_end], rax            ; save the end of the heap

    pop     rbp                        ; restore return address
    ret

;
;
; stack push addr
;
;   INPUT: rdi contains the int64 (pointer) that we add to the stack
;   OUTPUT: nothing
;
stack_push_addr:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rsi, qword [stack_pos]
    mov     qword [rsi], rdi
    add     qword [stack_pos], 8

    pop     rbp                        ; restore return address
    ret

;
;
; stack push
;
;   INPUT: rdi contains the int64 (pointer) that we add to the stack
;   OUTPUT: nothing
;
stack_push:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    push    rdi
    mov     rdi, 8
    call    allocate
    pop     rdi
    mov     [rax], rdi

    mov     rsi, qword [stack_pos]
    mov     qword [rsi], rax
    add     qword [stack_pos], 8

    pop     rbp                        ; restore return address
    ret

;
;
; stack peek addr
;
;   INPUT: nothing
;   OUTPUT: rax contains the int64 (pointer) that we pop from the stack
;
stack_peek_addr:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rax, qword [stack_pos]
    mov     rax, qword [rax - 8]

    pop     rbp                        ; restore return address
    ret

;
;
; stack peek
;
;   INPUT: nothing
;   OUTPUT: rax contains the int64 (pointer) that we pop from the stack
;
stack_peek:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rax, qword [stack_pos]
    mov     rax, qword [rax - 8]
    mov     rax, qword [rax]

    pop     rbp                        ; restore return address
    ret

;
;
; stack pop addr
;
;   INPUT: nothing
;   OUTPUT: rax contains the int64 (pointer) that we pop from the stack
;
stack_pop_addr:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rax, qword [stack_pos]
    mov     rax, qword [rax - 8]
    sub     qword [stack_pos], 8

    pop     rbp                        ; restore return address
    ret

;
;
; stack pop
;
;   INPUT: nothing
;   OUTPUT: rax contains the int64 (pointer) that we pop from the stack
;
stack_pop:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rax, qword [stack_pos]
    mov     rax, qword [rax - 8]
    mov     rax, qword [rax]
    sub     qword [stack_pos], 8

    pop     rbp                        ; restore return address
    ret

;
;
; stack pick
;
;   INPUT: rdi contains the index
;   OUTPUT: rax contains the int64 (pointer) that we pick from the stack
;
stack_pick_addr:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    mov     rax, qword [stack_pos]
    shl     rdi, 3 ; multiply index with 8
    sub     rax, rdi ; offset stack_pos with index*8
    mov     rax, qword [rax - 8]

    pop     rbp                        ; restore return address
    ret

;
;
; allocate
;
;   INPUT: rdi contains the size in bytes
;   OUTPUT: rax points to the newly allocated memory
;
allocate:
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    ; t0 <- heap_pos
    mov     rax, qword [heap_pos]
    mov     qword [rbp - loc_0], rax

    ; t1 <- t0 + rdi
    mov     rax, qword [rbp - loc_0]
    add     rax, rdi
    mov     qword [rbp - loc_1], rax

.alloc_do:
    ; cmp t1 <= heap_end
    mov     rax, qword [rbp - loc_1]
    cmp     rax, qword [heap_end]
    jle     .alloc_ok

    mov     rax, 12                    ; brk
    mov     rdi, 0x10000               ; 64K bytes (larger obj. will fail)
    add     rdi, [heap_end]            ; new end of the heap
    syscall

    mov     [heap_end], rax            ; save the new end of the heap
    jmp     .alloc_do

.alloc_ok:

    ; heap_pos <- t1
    mov     rax, qword [rbp - loc_1]
    mov     qword [heap_pos], rax

    ; return t0
    mov     rax, qword [rbp - loc_0]

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

section '.data' writeable

stack_env dq 0

; Define some constants
loc_0 = 8
loc_1 = 16
loc_2 = 24
loc_3 = 32
loc_4 = 40
loc_5 = 48
loc_6 = 56
loc_7 = 64

arg_0 = 16
arg_1 = 24
arg_2 = 32
arg_3 = 40
arg_4 = 48
arg_5 = 56
arg_6 = 64
arg_7 = 72

; Define entry point
section '.text' executable
public _start
_start:
    ; Initialize the memory
    call allocator_init

    ; store argc on the stack
    mov     rdi, qword [rsp]
    call    stack_push

    ; store argv on the stack
    mov     rdi, rsp
    add     rdi, 8
    call    stack_push

    ; store env in stack_env
    mov     rax, qword [rsp]
    shl     rax, 3
    mov     rdi, rsp
    add     rdi, 8
    add     rdi, rax
    add     rdi, 8
    mov     qword [stack_env], rdi

    ; Call the main method
    call    func.0 ; main

    ; Exit the program
    call    stack_pop
    mov     rdi, rax
    mov     rax, 60
    syscall

section '.text' executable

;
;
; dup
;
;   INPUT: (a)
;   OUTPUT: (a, a)
func.1: ; dup
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_peek_addr
    mov     rdi, rax
    call    stack_push_addr

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; swp
;
;   INPUT: (a, b)
;   OUTPUT: (b, a)
func.2: ; swp
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    ; t0 <- A
    call    stack_pop_addr
    mov     qword [rbp - loc_0], rax

    ; t1 <- B
    call    stack_pop_addr
    mov     qword [rbp - loc_1], rax

    ; push A
    mov     rdi, [rbp - loc_0]
    call    stack_push_addr

    ; push B
    mov     rdi, [rbp - loc_1]
    call    stack_push_addr

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; rot
;
;   INPUT: (a, b, c)
;   OUTPUT: (b, c, a)
func.3: ; rot
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 32                    ; allocate 4 local variables

    ; (C B A) -> (B A C)

    ; t0 <- A
    call    stack_pop_addr
    mov     qword [rbp - loc_0], rax

    ; t1 <- B
    call    stack_pop_addr
    mov     qword [rbp - loc_1], rax

    ; t2 <- C
    call    stack_pop_addr
    mov     qword [rbp - loc_2], rax

    ; push B
    mov     rdi, [rbp - loc_1]
    call    stack_push_addr

    ; push A
    mov     rdi, [rbp - loc_0]
    call    stack_push_addr

    ; push C
    mov     rdi, [rbp - loc_2]
    call    stack_push_addr

    add     rsp, 32                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; rot4
;
;   INPUT: (a, b, c, d)
;   OUTPUT: (b, c, d, a)
func.4: ; rot4
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 32                    ; allocate 4 local variables

    ; (D C B A) -> (C B A D)

    ; t0 <- A
    call    stack_pop_addr
    mov     qword [rbp - loc_0], rax

    ; t1 <- B
    call    stack_pop_addr
    mov     qword [rbp - loc_1], rax

    ; t2 <- C
    call    stack_pop_addr
    mov     qword [rbp - loc_2], rax

    ; t3 <- D
    call    stack_pop_addr
    mov     qword [rbp - loc_3], rax

    ; push C
    mov     rdi, [rbp - loc_2]
    call    stack_push_addr

    ; push B
    mov     rdi, [rbp - loc_1]
    call    stack_push_addr

    ; push A
    mov     rdi, [rbp - loc_0]
    call    stack_push_addr

    ; push D
    mov     rdi, [rbp - loc_3]
    call    stack_push_addr

    add     rsp, 32                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; pop
;
;   INPUT: (a)
;   OUTPUT: ()
func.5: ; pop
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop_addr

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; pick
;
;   INPUT: (int)
;   OUTPUT: (ptr)
func.6: ; pick
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    mov     rdi, rax
    call    stack_pick_addr
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; plus
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.7: ; +
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    add     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; sub
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.8: ; -
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    mov     rdi, rax
    pop     rax

    sub     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; mul
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.9: ; *
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    mul     rdi
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; div
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.10: ; /
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    cqo
    idiv    rdi
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; mod
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.11: ; %
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    cqo
    idiv    rdi
    mov     rdi, rdx
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; and
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.12: ; &
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    and     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; or
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.13: ; |
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    or      rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; xor
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.14: ; ^
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rdi

    xor     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; shr
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.15: ; >>
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rcx

    shr     ax, cl
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; shl
;
;   INPUT: (int, int)
;   OUTPUT: (int)
func.16: ; <<
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    pop     rcx

    shl     ax, cl
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; greater than
;
;   INPUT: (int, int)
;   OUTPUT: (bool)
func.17: ; >
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    mov     rdi, rax
    pop     rax

    cmp     rdi, rax
    setg    al
    and     al, 1
    movzx   rax, al
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; less than
;
;   INPUT: (int, int)
;   OUTPUT: (bool)
func.18: ; <
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    mov     rdi, rax
    pop     rax

    cmp     rdi, rax
    setl    al
    and     al, 1
    movzx   rax, al
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; less than
;
;   INPUT: (int, int)
;   OUTPUT: (bool)
func.19: ; =
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    push    rax

    call    stack_pop
    mov     rdi, rax
    pop     rax

    cmp     rdi, rax
    sete    al
    and     al, 1
    movzx   rax, al
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; memory allocate
;
;   INPUT: (int)
;   OUTPUT: (ptr)
func.20: ; ptr.alloc
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 16                    ; allocate 2 local variables

    call    stack_pop
    mov     rdi, rax
    call    allocate
    mov     rdi, rax
    call    stack_push

    add     rsp, 16                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; memory offset
;
;   INPUT: (ptr, int)
;   OUTPUT: (ptr)
func.21: ; ptr.+
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 24                    ; allocate 3 local variables

    ; t1 <- int
    call    stack_pop
    mov     qword [rbp - loc_1], rax

    ; t2 <- ptr
    call    stack_pop
    mov     qword [rbp - loc_2], rax

    ; ptr[0] <- byte a
    mov     rax, qword [rbp - loc_2]
    mov     rdi, qword [rbp - loc_1]
    add     rdi, rax
    call    stack_push

    add     rsp, 24                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; memory copy
;
;   INPUT: (dst, src, len)
;   OUTPUT: ()
func.22: ; ptr.@
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 24                    ; allocate 3 local variables

    ; t0 <- len
    call    stack_pop
    mov     qword [rbp - loc_0], rax

    ; t1 <- src
    call    stack_pop
    mov     qword [rbp - loc_1], rax

    ; t2 <- dst
    call    stack_pop
    mov     qword [rbp - loc_2], rax

    mov     rdi, qword [rbp - loc_2]
    mov     rsi, qword [rbp - loc_1]
    mov     rdx, qword [rbp - loc_0]

.next_byte:
    cmp     rdx, 0                     ; check if done
    jle     .done

    mov     al, byte [rsi]             ; get byte from self
    mov     byte [rdi], al             ; copy byte to new object

    inc     rdi                        ; increment destination
    inc     rsi                        ; increment source
    dec     rdx                        ; decrement count

    jmp .next_byte
.done:

    mov     rdi, qword [rbp - loc_2]
    call    stack_push

    add     rsp, 24                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

func.23: ; int.&
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp                        ; restore return address
    ret

func.24: ; int.*
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp                        ; restore return address
    ret

func.25: ; ptr.&
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp                        ; restore return address
    ret

func.26: ; ptr.*
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp                        ; restore return address
    ret

func.27: ; bool.&
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp                        ; restore return address
    ret

func.28: ; bool.*
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; deref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp                        ; restore return address
    ret

func.29: ; os.env
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame

    ; get env vars ptr
    mov     rdi, qword [stack_env]
    call    stack_push

    pop     rbp                        ; restore return address
    ret

;
;
; syscall1
;
;   INPUT: (a, int)
;   OUTPUT: (int)
func.30: ; syscall1
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 32                    ; allocate 4 local variables

    ; t0 <- int
    call    stack_pop
    mov     qword [rbp - loc_0], rax

    ; t1 <- a
    call    stack_pop
    mov     qword [rbp - loc_1], rax

    ; syscall1(t0) t1
    mov     rax, qword [rbp - loc_0]
    mov     rdi, qword [rbp - loc_1]
    syscall

    mov     rdi, rax
    call    stack_push

    add     rsp, 32                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

;
;
; syscall3
;
;   INPUT: (a, b, c, int)
;   OUTPUT: (int)
func.31: ; syscall3
    push    rbp                        ; save return address
    mov     rbp, rsp                   ; set up stack frame
    sub     rsp, 32                    ; allocate 4 local variables

    ; t0 <- int
    call    stack_pop
    mov     qword [rbp - loc_0], rax

    ; t1 <- c
    call    stack_pop
    mov     qword [rbp - loc_1], rax

    ; t2 <- b
    call    stack_pop
    mov     qword [rbp - loc_2], rax

    ; t3 <- a
    call    stack_pop
    mov     qword [rbp - loc_3], rax

    ; syscall3(t0) t3 t2 t1
    mov     rax, qword [rbp - loc_0]
    mov     rdi, qword [rbp - loc_3]
    mov     rsi, qword [rbp - loc_2]
    mov     rdx, qword [rbp - loc_1]
    syscall

    mov     rdi, rax
    call    stack_push

    add     rsp, 32                    ; deallocate local variables
    pop     rbp                        ; restore return address
    ret

section '.text' executable

func.32: ; stack_token_kind.map
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if0
.else0:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if1
.else1:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if2
.else2:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if3
.else3:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if4
.else4:
    call    func.1 ; dup
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if5
.else5:
    call    func.1 ; dup
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if6
.else6:
    call    func.1 ; dup
    mov     rdi, literal.7 ; 7
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if7
.else7:
    call    func.1 ; dup
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if8
.else8:
    call    func.1 ; dup
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if9
.else9:
    call    func.1 ; dup
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if10
.else10:
    call    func.1 ; dup
    mov     rdi, literal.11 ; 11
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if11
.else11:
    call    func.1 ; dup
    mov     rdi, literal.12 ; 12
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if12
.else12:
    call    func.1 ; dup
    mov     rdi, literal.13 ; 13
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if13
.else13:
    call    func.1 ; dup
    mov     rdi, literal.14 ; 14
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if14
.else14:
    call    func.1 ; dup
    mov     rdi, literal.15 ; 15
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if15
.else15:
    call    func.1 ; dup
    mov     rdi, literal.16 ; 16
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if16
.else16:
    call    func.1 ; dup
    mov     rdi, literal.17 ; 17
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if17
.else17:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    jmp    .fi17
.if17:
    call    func.5 ; pop
    mov     rdi, literal.24 ; "CONST"
    call    stack_push_addr
.fi17:
    jmp    .fi16
.if16:
    call    func.5 ; pop
    mov     rdi, literal.25 ; "IMPORT"
    call    stack_push_addr
.fi16:
    jmp    .fi15
.if15:
    call    func.5 ; pop
    mov     rdi, literal.26 ; "DATA"
    call    stack_push_addr
.fi15:
    jmp    .fi14
.if14:
    call    func.5 ; pop
    mov     rdi, literal.27 ; "FI"
    call    stack_push_addr
.fi14:
    jmp    .fi13
.if13:
    call    func.5 ; pop
    mov     rdi, literal.28 ; "ELSE"
    call    stack_push_addr
.fi13:
    jmp    .fi12
.if12:
    call    func.5 ; pop
    mov     rdi, literal.29 ; "IF"
    call    stack_push_addr
.fi12:
    jmp    .fi11
.if11:
    call    func.5 ; pop
    mov     rdi, literal.30 ; ","
    call    stack_push_addr
.fi11:
    jmp    .fi10
.if10:
    call    func.5 ; pop
    mov     rdi, literal.31 ; ")"
    call    stack_push_addr
.fi10:
    jmp    .fi9
.if9:
    call    func.5 ; pop
    mov     rdi, literal.32 ; "("
    call    stack_push_addr
.fi9:
    jmp    .fi8
.if8:
    call    func.5 ; pop
    mov     rdi, literal.33 ; "END"
    call    stack_push_addr
.fi8:
    jmp    .fi7
.if7:
    call    func.5 ; pop
    mov     rdi, literal.34 ; "IN"
    call    stack_push_addr
.fi7:
    jmp    .fi6
.if6:
    call    func.5 ; pop
    mov     rdi, literal.35 ; "FUNC"
    call    stack_push_addr
.fi6:
    jmp    .fi5
.if5:
    call    func.5 ; pop
    mov     rdi, literal.36 ; "NAME"
    call    stack_push_addr
.fi5:
    jmp    .fi4
.if4:
    call    func.5 ; pop
    mov     rdi, literal.37 ; "STRING"
    call    stack_push_addr
.fi4:
    jmp    .fi3
.if3:
    call    func.5 ; pop
    mov     rdi, literal.38 ; "BOOLEAN"
    call    stack_push_addr
.fi3:
    jmp    .fi2
.if2:
    call    func.5 ; pop
    mov     rdi, literal.39 ; "NUMBER"
    call    stack_push_addr
.fi2:
    jmp    .fi1
.if1:
    call    func.5 ; pop
    mov     rdi, literal.40 ; "ILLEGAL"
    call    stack_push_addr
.fi1:
    jmp    .fi0
.if0:
    call    func.5 ; pop
    mov     rdi, literal.41 ; "<EOF>"
    call    stack_push_addr
.fi0:

    pop     rbp
    ret

func.37:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.38:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.39: ; stack_token.init.empty
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*

    pop     rbp
    ret

func.41: ; stack_token.init.ok
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*

    pop     rbp
    ret

func.42:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.43:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.44: ; stack_lexer.init.with_buffer
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.4 ; rot4
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.42 ; stack_lexer.*
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop

    pop     rbp
    ret

func.46: ; stack_lexer.pos.to_lc'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if18
.else18:
    call    func.48 ; pop2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    jmp    .fi18
.if18:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.50 ; string.!!
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if19
.else19:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.46 ; stack_lexer.pos.to_lc'
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    jmp    .fi19
.if19:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.46 ; stack_lexer.pos.to_lc'
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
.fi19:
.fi18:

    pop     rbp
    ret

func.51: ; stack_lexer.pos.to_lc
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.46 ; stack_lexer.pos.to_lc'

    pop     rbp
    ret

func.52: ; stack_lexer.peek
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if20
.else20:
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.50 ; string.!!
    jmp    .fi20
.if20:
    call    func.48 ; pop2
    mov     rdi, literal.42 ; 26
    call    stack_push_addr
.fi20:

    pop     rbp
    ret

func.45: ; stack_lexer.read
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.52 ; stack_lexer.peek
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.48 ; pop2

    pop     rbp
    ret

func.55: ; stack_lexer.skip.whitespace
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.56 ; byte.isspace
    call    stack_pop
    test    rax, rax
    jnz     .if21
.else21:
    call    func.5 ; pop
    jmp    .fi21
.if21:
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    call    func.55 ; stack_lexer.skip.whitespace
.fi21:

    pop     rbp
    ret

func.57: ; stack_lexer.skip.until_newline
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.42 ; 26
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.58 ; or
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if22
.else22:
    call    func.5 ; pop
    jmp    .fi22
.if22:
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    call    func.57 ; stack_lexer.skip.until_newline
.fi22:

    pop     rbp
    ret

func.60: ; stack_lexer.next.number'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.61 ; byte.isdigit
    call    stack_pop
    test    rax, rax
    jnz     .if23
.else23:
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.48 ; pop2
    jmp    .fi23
.if23:
    call    func.63 ; byte.chr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.3 ; rot
    call    func.60 ; stack_lexer.next.number'
.fi23:

    pop     rbp
    ret

func.64: ; stack_lexer.next.number
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.43 ; 45
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if24
.else24:
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    jmp    .fi24
.if24:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    mov     rdi, literal.44 ; "-"
    call    stack_push_addr
.fi24:
    call    func.60 ; stack_lexer.next.number'

    pop     rbp
    ret

func.65: ; stack_lexer.next.string
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.45 ; 34
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if25
.else25:
    call    func.5 ; pop
    mov     rdi, literal.46 ; "\""
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.41 ; stack_token.init.ok
    jmp    .fi25
.if25:
    call    func.1 ; dup
    mov     rdi, literal.42 ; 26
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if26
.else26:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if27
.else27:
    call    func.1 ; dup
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if28
.else28:
    call    func.1 ; dup
    mov     rdi, literal.47 ; 92
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if29
.else29:
    jmp    .fi29
.if29:
    call    func.63 ; byte.chr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.3 ; rot
    call    func.2 ; swp
.fi29:
    call    func.63 ; byte.chr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.3 ; rot
    call    func.65 ; stack_lexer.next.string
    jmp    .fi28
.if28:
    call    func.66 ; pop3
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*
.fi28:
    jmp    .fi27
.if27:
    call    func.66 ; pop3
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*
.fi27:
    jmp    .fi26
.if26:
    call    func.66 ; pop3
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*
.fi26:
.fi25:

    pop     rbp
    ret

func.67: ; stack_lexer.next.name'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.68 ; byte.isname
    call    stack_pop
    test    rax, rax
    jnz     .if30
.else30:
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.66 ; pop3
    jmp    .fi30
.if30:
    call    func.63 ; byte.chr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    call    func.3 ; rot
    call    func.67 ; stack_lexer.next.name'
.fi30:

    pop     rbp
    ret

func.70: ; stack_lexer.next.name
    push    rbp
    mov     rbp, rsp

    call    func.71 ; dup3
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.67 ; stack_lexer.next.name'
    call    func.1 ; dup
    mov     rdi, literal.48 ; "import"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if31
.else31:
    call    func.1 ; dup
    mov     rdi, literal.49 ; "func"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if32
.else32:
    call    func.1 ; dup
    mov     rdi, literal.50 ; "in"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if33
.else33:
    call    func.1 ; dup
    mov     rdi, literal.51 ; "end"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if34
.else34:
    call    func.1 ; dup
    mov     rdi, literal.52 ; "data"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if35
.else35:
    call    func.1 ; dup
    mov     rdi, literal.53 ; "true"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if36
.else36:
    call    func.1 ; dup
    mov     rdi, literal.54 ; "false"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if37
.else37:
    call    func.1 ; dup
    mov     rdi, literal.55 ; "if"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if38
.else38:
    call    func.1 ; dup
    mov     rdi, literal.56 ; "else"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if39
.else39:
    call    func.1 ; dup
    mov     rdi, literal.57 ; "fi"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if40
.else40:
    call    func.1 ; dup
    mov     rdi, literal.58 ; "const"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if41
.else41:
    call    func.1 ; dup
    mov     rdi, literal.59 ; "@import"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if42
.else42:
    call    func.69 ; rot4'
    call    func.48 ; pop2
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.41 ; stack_token.init.ok
    jmp    .fi42
.if42:
    call    func.66 ; pop3
    mov     rdi, literal.16 ; 16
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi42:
    jmp    .fi41
.if41:
    call    func.66 ; pop3
    mov     rdi, literal.17 ; 17
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi41:
    jmp    .fi40
.if40:
    call    func.66 ; pop3
    mov     rdi, literal.14 ; 14
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi40:
    jmp    .fi39
.if39:
    call    func.66 ; pop3
    mov     rdi, literal.13 ; 13
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi39:
    jmp    .fi38
.if38:
    call    func.66 ; pop3
    mov     rdi, literal.12 ; 12
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi38:
    jmp    .fi37
.if37:
    call    func.66 ; pop3
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    mov     rdi, literal.54 ; "false"
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi37:
    jmp    .fi36
.if36:
    call    func.66 ; pop3
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    mov     rdi, literal.53 ; "true"
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi36:
    jmp    .fi35
.if35:
    call    func.66 ; pop3
    mov     rdi, literal.15 ; 15
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi35:
    jmp    .fi34
.if34:
    call    func.66 ; pop3
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi34:
    jmp    .fi33
.if33:
    call    func.66 ; pop3
    mov     rdi, literal.7 ; 7
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi33:
    jmp    .fi32
.if32:
    call    func.66 ; pop3
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi32:
    jmp    .fi31
.if31:
    call    func.66 ; pop3
    mov     rdi, literal.16 ; 16
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi31:

    pop     rbp
    ret

func.73: ; stack_lexer.next
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.55 ; stack_lexer.skip.whitespace
    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.42 ; 26
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if43
.else43:
    call    func.1 ; dup
    mov     rdi, literal.60 ; 40
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if44
.else44:
    call    func.1 ; dup
    mov     rdi, literal.61 ; 41
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if45
.else45:
    call    func.1 ; dup
    mov     rdi, literal.62 ; 44
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if46
.else46:
    call    func.1 ; dup
    mov     rdi, literal.43 ; 45
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.52 ; stack_lexer.peek
    mov     rdi, literal.43 ; 45
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.74 ; and
    call    func.2 ; swp
    call    func.62 ; rot'
    call    stack_pop
    test    rax, rax
    jnz     .if47
.else47:
    call    func.1 ; dup
    call    func.61 ; byte.isdigit
    call    func.62 ; rot'
    call    func.1 ; dup
    mov     rdi, literal.43 ; 45
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.52 ; stack_lexer.peek
    call    func.61 ; byte.isdigit
    call    func.3 ; rot
    call    func.74 ; and
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if48
.else48:
    call    func.1 ; dup
    mov     rdi, literal.45 ; 34
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if49
.else49:
    call    func.1 ; dup
    call    func.68 ; byte.isname
    call    stack_pop
    test    rax, rax
    jnz     .if50
.else50:
    call    func.34 ; int.show
    call    func.2 ; swp
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.37 ; stack_token.*
    jmp    .fi50
.if50:
    call    func.70 ; stack_lexer.next.name
.fi50:
    jmp    .fi49
.if49:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.45 ; stack_lexer.read
    mov     rdi, literal.46 ; "\""
    call    stack_push_addr
    call    func.65 ; stack_lexer.next.string
.fi49:
    jmp    .fi48
.if48:
    call    func.71 ; dup3
    call    func.64 ; stack_lexer.next.number
    call    func.62 ; rot'
    call    func.48 ; pop2
    call    func.2 ; swp
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.41 ; stack_token.init.ok
.fi48:
    jmp    .fi47
.if47:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.57 ; stack_lexer.skip.until_newline
    call    func.62 ; rot'
    call    func.48 ; pop2
    call    func.73 ; stack_lexer.next
.fi47:
    jmp    .fi46
.if46:
    call    func.5 ; pop
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    mov     rdi, literal.11 ; 11
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi46:
    jmp    .fi45
.if45:
    call    func.5 ; pop
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi45:
    jmp    .fi44
.if44:
    call    func.5 ; pop
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi44:
    jmp    .fi43
.if43:
    call    func.5 ; pop
    call    func.45 ; stack_lexer.read
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.3 ; rot
    call    func.41 ; stack_token.init.ok
.fi43:

    pop     rbp
    ret

func.75: ; stack_lexer.dump
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.73 ; stack_lexer.next
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.32 ; stack_token_kind.map
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if51
.else51:
    call    func.5 ; pop
    call    func.2 ; swp
    jmp    .fi51
.if51:
    call    func.3 ; rot
    mov     rdi, literal.32 ; "("
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.31 ; ")"
    call    stack_push_addr
    call    func.33 ; string.concat
.fi51:
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.76 ; string.stdout
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if52
.else52:
    call    func.5 ; pop
    jmp    .fi52
.if52:
    call    func.75 ; stack_lexer.dump
.fi52:

    pop     rbp
    ret

func.77:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.78:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.79: ; stack_parser.init.with_lexer
    push    rbp
    mov     rbp, rsp

    call    func.39 ; stack_token.init.empty
    call    func.39 ; stack_token.init.empty
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.77 ; stack_parser.*
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.5 ; pop

    pop     rbp
    ret

func.81: ; stack_parser.peek
    push    rbp
    mov     rbp, rsp

    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.37 ; stack_token.*

    pop     rbp
    ret

func.80: ; stack_parser.read
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.73 ; stack_lexer.next
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.37 ; stack_token.*

    pop     rbp
    ret

func.82: ; stack_parser.parse.exprs.until
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if53
.else53:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.83 ; stack_parser.parse.expr
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if54
.else54:
    jmp    .fi54
.if54:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi54:
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if55
.else55:
    jmp    .fi55
.if55:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi55:
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.82 ; stack_parser.parse.exprs.until
    jmp    .fi53
.if53:
    call    func.5 ; pop
    call    func.80 ; stack_parser.read
    call    func.5 ; pop
.fi53:

    pop     rbp
    ret

func.86: ; stack_parser.parse.exprs.while
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.83 ; stack_parser.parse.expr
    call    stack_pop
    test    rax, rax
    jnz     .if56
.else56:
    call    func.48 ; pop2
    jmp    .fi56
.if56:
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if57
.else57:
    jmp    .fi57
.if57:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi57:
    call    func.86 ; stack_parser.parse.exprs.while
.fi56:

    pop     rbp
    ret

func.87: ; stack_parser.parse.exprs.until2
    push    rbp
    mov     rbp, rsp

    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.19 ; =
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if58
.else58:
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.83 ; stack_parser.parse.expr
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if59
.else59:
    jmp    .fi59
.if59:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi59:
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if60
.else60:
    jmp    .fi60
.if60:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi60:
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.87 ; stack_parser.parse.exprs.until2
    jmp    .fi58
.if58:
    call    func.66 ; pop3
    call    func.80 ; stack_parser.read
    call    func.5 ; pop
.fi58:

    pop     rbp
    ret

func.88: ; stack_parser.parse.names.until'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if61
.else61:
    jmp    .fi61
.if61:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi61:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if62
.else62:
    jmp    .fi62
.if62:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi62:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if63
.else63:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.11 ; 11
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if64
.else64:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.48 ; pop2
    jmp    .fi64
.if64:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.88 ; stack_parser.parse.names.until'
.fi64:
    jmp    .fi63
.if63:
    call    func.48 ; pop2
.fi63:

    pop     rbp
    ret

func.91: ; stack_parser.parse.names.until
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if65
.else65:
    call    func.2 ; swp
    call    func.88 ; stack_parser.parse.names.until'
    jmp    .fi65
.if65:
    call    func.80 ; stack_parser.read
    call    func.5 ; pop
.fi65:

    pop     rbp
    ret

func.92: ; stack_parser.parse.cond
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.13 ; 13
    call    stack_push_addr
    mov     rdi, literal.14 ; 14
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.87 ; stack_parser.parse.exprs.until2
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.37 ; stack_token.*
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.13 ; 13
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if66
.else66:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.2 ; swp
    jmp    .fi66
.if66:
    call    func.1 ; dup
    mov     rdi, literal.14 ; 14
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.82 ; stack_parser.parse.exprs.until
    call    func.2 ; swp
.fi66:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.95 ; stack_ast_cond.*

    pop     rbp
    ret

func.96: ; stack_parser.illegal.showf
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.2 ; swp
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.51 ; stack_lexer.pos.to_lc
    call    func.2 ; swp
    call    func.34 ; int.show
    call    func.76 ; string.stdout
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.34 ; int.show
    call    func.76 ; string.stdout
    mov     rdi, literal.67 ; ", "
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.68 ; "Lexical Error: "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if67
.else67:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if68
.else68:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if69
.else69:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if70
.else70:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.48 ; pop2
    jmp    .fi70
.if70:
    mov     rdi, literal.69 ; "Unterminated string"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.48 ; pop2
.fi70:
    jmp    .fi69
.if69:
    mov     rdi, literal.70 ; "String contains new line character"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.48 ; pop2
.fi69:
    jmp    .fi68
.if68:
    mov     rdi, literal.71 ; "String contains null character"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.48 ; pop2
.fi68:
    jmp    .fi67
.if67:
    mov     rdi, literal.72 ; "Invalid character: "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.48 ; pop2
.fi67:
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop

    pop     rbp
    ret

func.83: ; stack_parser.parse.expr
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if71
.else71:
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if72
.else72:
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if73
.else73:
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if74
.else74:
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.12 ; 12
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if75
.else75:
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if76
.else76:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi76
.if76:
    call    func.1 ; dup
    call    func.96 ; stack_parser.illegal.showf
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi76:
    jmp    .fi75
.if75:
    call    func.92 ; stack_parser.parse.cond
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.2 ; swp
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi75:
    jmp    .fi74
.if74:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi74:
    jmp    .fi73
.if73:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi73:
    jmp    .fi72
.if72:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi72:
    jmp    .fi71
.if71:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi71:

    pop     rbp
    ret

func.99: ; stack_parser.parse.func
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if77
.else77:
    jmp    .fi77
.if77:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi77:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if78
.else78:
    jmp    .fi78
.if78:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi78:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if79
.else79:
    jmp    .fi79
.if79:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi79:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.91 ; stack_parser.parse.names.until
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if80
.else80:
    jmp    .fi80
.if80:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi80:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.91 ; stack_parser.parse.names.until
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.7 ; 7
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if81
.else81:
    jmp    .fi81
.if81:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi81:
    call    func.1 ; dup
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.82 ; stack_parser.parse.exprs.until
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.100 ; stack_ast_func.*

    pop     rbp
    ret

func.101: ; stack_parser.parse.data_field.until'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if82
.else82:
    jmp    .fi82
.if82:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi82:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if83
.else83:
    jmp    .fi83
.if83:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi83:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.62 ; rot'
    call    func.69 ; rot4'
    call    func.69 ; rot4'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.102 ; stack_ast_data_field.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.103 ; stack_ast_data_field.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if84
.else84:
    jmp    .fi84
.if84:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi84:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if85
.else85:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.11 ; 11
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if86
.else86:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.48 ; pop2
    jmp    .fi86
.if86:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.101 ; stack_parser.parse.data_field.until'
.fi86:
    jmp    .fi85
.if85:
    call    func.48 ; pop2
.fi85:

    pop     rbp
    ret

func.104: ; stack_parser.parse.data_field.until
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if87
.else87:
    call    func.2 ; swp
    call    func.101 ; stack_parser.parse.data_field.until'
    jmp    .fi87
.if87:
    call    func.80 ; stack_parser.read
    call    func.5 ; pop
.fi87:

    pop     rbp
    ret

func.105: ; stack_parser.parse.data
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.15 ; 15
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if88
.else88:
    jmp    .fi88
.if88:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi88:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if89
.else89:
    jmp    .fi89
.if89:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi89:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if90
.else90:
    jmp    .fi90
.if90:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi90:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.104 ; stack_parser.parse.data_field.until
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.106 ; stack_ast_data.*

    pop     rbp
    ret

func.107: ; stack_parser.parse.const
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.17 ; 17
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if91
.else91:
    jmp    .fi91
.if91:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi91:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if92
.else92:
    jmp    .fi92
.if92:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi92:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.86 ; stack_parser.parse.exprs.while
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*

    pop     rbp
    ret

func.109: ; stack_parser.parse.import
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.16 ; 16
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if93
.else93:
    jmp    .fi93
.if93:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi93:
    call    func.1 ; dup
    call    func.80 ; stack_parser.read
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if94
.else94:
    jmp    .fi94
.if94:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi94:
    call    func.53 ; dup2
    call    func.38 ; stack_token.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.110 ; stack_ast_import.*

    pop     rbp
    ret

func.111: ; stack_parser.parse'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.81 ; stack_parser.peek
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if95
.else95:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.15 ; 15
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if96
.else96:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if97
.else97:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.16 ; 16
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if98
.else98:
    call    func.1 ; dup
    call    func.38 ; stack_token.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.17 ; 17
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if99
.else99:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.5 ; pop
    call    func.2 ; swp
    jmp    .fi99
.if99:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.107 ; stack_parser.parse.const
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.112 ; stack_ast.features.append.const
.fi99:
    jmp    .fi98
.if98:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.109 ; stack_parser.parse.import
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.113 ; stack_ast.features.append.import
.fi98:
    jmp    .fi97
.if97:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.99 ; stack_parser.parse.func
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.114 ; stack_ast.features.append.func
.fi97:
    jmp    .fi96
.if96:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.105 ; stack_parser.parse.data
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.115 ; stack_ast.features.append.data
.fi96:
    call    func.111 ; stack_parser.parse'
    jmp    .fi95
.if95:
    call    func.48 ; pop2
.fi95:

    pop     rbp
    ret

func.116: ; stack_parser.parse
    push    rbp
    mov     rbp, rsp

    call    func.117 ; stack_ast.init.empty
    call    func.111 ; stack_parser.parse'
    mov     rdi, literal.74 ; true
    call    stack_push_addr

    pop     rbp
    ret

func.89:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.90:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.95:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.98:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.97:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.84:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.102:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.103:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.106:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.118:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.100:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.119:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.108:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.120:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.110:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.121:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.122:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.123:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.124:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.125:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.117: ; stack_ast.init.empty
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.124 ; stack_ast.*

    pop     rbp
    ret

func.126: ; stack_ast.append
    push    rbp
    mov     rbp, rsp

    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.128 ; array.extend
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if100
.else100:
    jmp    .fi100
.if100:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi100:

    pop     rbp
    ret

func.129: ; stack_ast.features.append
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.123 ; stack_ast_feature.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if101
.else101:
    jmp    .fi101
.if101:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi101:

    pop     rbp
    ret

func.114: ; stack_ast.features.append.func
    push    rbp
    mov     rbp, rsp

    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.129 ; stack_ast.features.append

    pop     rbp
    ret

func.115: ; stack_ast.features.append.data
    push    rbp
    mov     rbp, rsp

    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.129 ; stack_ast.features.append

    pop     rbp
    ret

func.112: ; stack_ast.features.append.const
    push    rbp
    mov     rbp, rsp

    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.129 ; stack_ast.features.append

    pop     rbp
    ret

func.113: ; stack_ast.features.append.import
    push    rbp
    mov     rbp, rsp

    call    func.121 ; stack_ast_import.&
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.129 ; stack_ast.features.append

    pop     rbp
    ret

func.130: ; stack_ast.dump.cond
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    mov     rdi, literal.76 ; "IF\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.132 ; stack_ast.dump.exprs
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    mov     rdi, literal.77 ; "ELSE\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.132 ; stack_ast.dump.exprs
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    mov     rdi, literal.78 ; "FI\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.48 ; pop2

    pop     rbp
    ret

func.133: ; stack_ast.dump.exprs'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if102
.else102:
    call    func.66 ; pop3
    jmp    .fi102
.if102:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if103
.else103:
    jmp    .fi103
.if103:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi103:
    call    func.97 ; stack_ast_expr.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if104
.else104:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if105
.else105:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if106
.else106:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if107
.else107:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if108
.else108:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.48 ; pop2
    jmp    .fi108
.if108:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.130 ; stack_ast.dump.cond
.fi108:
    jmp    .fi107
.if107:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi107:
    jmp    .fi106
.if106:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi106:
    jmp    .fi105
.if105:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi105:
    jmp    .fi104
.if104:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi104:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.133 ; stack_ast.dump.exprs'
.fi102:

    pop     rbp
    ret

func.132: ; stack_ast.dump.exprs
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.133 ; stack_ast.dump.exprs'

    pop     rbp
    ret

func.135: ; stack_ast.dump.args'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if109
.else109:
    call    func.66 ; pop3
    jmp    .fi109
.if109:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if110
.else110:
    jmp    .fi110
.if110:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi110:
    call    func.89 ; stack_ast_node.*
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.34 ; int.show
    mov     rdi, literal.79 ; "arg"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.76 ; string.stdout
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.135 ; stack_ast.dump.args'
.fi109:

    pop     rbp
    ret

func.136: ; stack_ast.dump.args
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.135 ; stack_ast.dump.args'

    pop     rbp
    ret

func.137: ; stack_ast.dump.rets'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if111
.else111:
    call    func.66 ; pop3
    jmp    .fi111
.if111:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if112
.else112:
    jmp    .fi112
.if112:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi112:
    call    func.89 ; stack_ast_node.*
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.34 ; int.show
    mov     rdi, literal.80 ; "ret"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.76 ; string.stdout
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.137 ; stack_ast.dump.rets'
.fi111:

    pop     rbp
    ret

func.138: ; stack_ast.dump.rets
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.137 ; stack_ast.dump.rets'

    pop     rbp
    ret

func.139: ; stack_ast.dump.fields'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if113
.else113:
    call    func.66 ; pop3
    jmp    .fi113
.if113:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if114
.else114:
    jmp    .fi114
.if114:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi114:
    call    func.102 ; stack_ast_data_field.*
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.139 ; stack_ast.dump.fields'
.fi113:

    pop     rbp
    ret

func.140: ; stack_ast.dump.fields
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.139 ; stack_ast.dump.fields'

    pop     rbp
    ret

func.141: ; stack_ast.dump'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if115
.else115:
    call    func.48 ; pop2
    jmp    .fi115
.if115:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if116
.else116:
    jmp    .fi116
.if116:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi116:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if117
.else117:
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if118
.else118:
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if119
.else119:
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if120
.else120:
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.34 ; int.show
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.81 ; "todo!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.5 ; pop
    jmp    .fi120
.if120:
    mov     rdi, literal.82 ; "@import "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.108 ; stack_ast_const.*
    call    func.1 ; dup
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.83 ; "\n\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi120:
    jmp    .fi119
.if119:
    mov     rdi, literal.84 ; "const "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.108 ; stack_ast_const.*
    call    func.1 ; dup
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.2 ; swp
    call    func.132 ; stack_ast.dump.exprs
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi119:
    jmp    .fi118
.if118:
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.2 ; swp
    call    func.136 ; stack_ast.dump.args
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.2 ; swp
    call    func.138 ; stack_ast.dump.rets
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.75 ; " "
    call    stack_push_addr
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.131 ; string.repeat
    call    func.76 ; string.stdout
    mov     rdi, literal.86 ; "body:\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.132 ; stack_ast.dump.exprs
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi118:
    jmp    .fi117
.if117:
    mov     rdi, literal.87 ; "data "
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.106 ; stack_ast_data.*
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.2 ; swp
    call    func.140 ; stack_ast.dump.fields
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    call    func.5 ; pop
.fi117:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.141 ; stack_ast.dump'
.fi115:

    pop     rbp
    ret

func.142: ; stack_ast.dump
    push    rbp
    mov     rbp, rsp

    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.141 ; stack_ast.dump'

    pop     rbp
    ret

func.143:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.144:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.145: ; stack_home
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.88 ; "STACK_HOME"
    call    stack_push_addr
    call    func.146 ; os.env.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if121
.else121:
    jmp    .fi121
.if121:
    call    func.5 ; pop
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
.fi121:

    pop     rbp
    ret

func.147: ; stack_preprocessor.run.base.consts
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    call    func.44 ; stack_lexer.init.with_buffer
    call    func.79 ; stack_parser.init.with_lexer
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.34 ; int.show
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if122
.else122:
    jmp    .fi122
.if122:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi122:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.71 ; dup3
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.112 ; stack_ast.features.append.const
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.34 ; int.show
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if123
.else123:
    jmp    .fi123
.if123:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi123:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.71 ; dup3
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.112 ; stack_ast.features.append.const
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.34 ; int.show
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if124
.else124:
    jmp    .fi124
.if124:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi124:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.71 ; dup3
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.112 ; stack_ast.features.append.const
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.66 ; pop3

    pop     rbp
    ret

func.148: ; stack_preprocessor.run.import
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if125
.else125:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi125
.if125:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if126
.else126:
    jmp    .fi126
.if126:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi126:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if127
.else127:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.62 ; rot'
    jmp    .fi127
.if127:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.110 ; stack_ast_import.*
    call    func.121 ; stack_ast_import.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.145 ; stack_home
    mov     rdi, literal.94 ; "/lib"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.95 ; "/"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.96 ; "stack"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.1 ; dup
    mov     rdi, literal.97 ; "r"
    call    stack_push_addr
    call    func.149 ; stdlib.fopen
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if128
.else128:
    jmp    .fi128
.if128:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi128:
    call    func.1 ; dup
    call    func.150 ; stdlib.fread.<eof>
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if129
.else129:
    jmp    .fi129
.if129:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi129:
    call    func.2 ; swp
    call    func.151 ; stdlib.fclose
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if130
.else130:
    jmp    .fi130
.if130:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi130:
    call    func.2 ; swp
    call    func.44 ; stack_lexer.init.with_buffer
    call    func.79 ; stack_parser.init.with_lexer
    call    func.116 ; stack_parser.parse
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if131
.else131:
    jmp    .fi131
.if131:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi131:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.20 ; ptr.alloc
    call    func.143 ; stack_preprocessor.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.152 ; stack_preprocessor.run'
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.126 ; stack_ast.append
    call    func.2 ; swp
    call    func.62 ; rot'
.fi127:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.148 ; stack_preprocessor.run.import
.fi125:

    pop     rbp
    ret

func.153: ; stack_preprocessor.run.expand.update
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if132
.else132:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi132
.if132:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if133
.else133:
    jmp    .fi133
.if133:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi133:
    call    func.97 ; stack_ast_expr.*
    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.58 ; or
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.58 ; or
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if134
.else134:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if135
.else135:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.81 ; "todo!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.3 ; rot
    jmp    .fi135
.if135:
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.153 ; stack_preprocessor.run.expand.update
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.153 ; stack_preprocessor.run.expand.update
    call    func.5 ; pop
.fi135:
    jmp    .fi134
.if134:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.4 ; rot4
    call    func.53 ; dup2
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.77 ; stack_parser.*
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.5 ; pop
.fi134:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.153 ; stack_preprocessor.run.expand.update
.fi132:

    pop     rbp
    ret

func.154: ; stack_preprocessor.run.expand.exprs
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if136
.else136:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi136
.if136:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if137
.else137:
    jmp    .fi137
.if137:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi137:
    call    func.97 ; stack_ast_expr.*
    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if138
.else138:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if139
.else139:
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi139
.if139:
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.154 ; stack_preprocessor.run.expand.exprs
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.154 ; stack_preprocessor.run.expand.exprs
    call    func.5 ; pop
    call    func.62 ; rot'
.fi139:
    jmp    .fi138
.if138:
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if140
.else140:
    jmp    .fi140
.if140:
    call    func.71 ; dup3
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if141
.else141:
    jmp    .fi141
.if141:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi141:
    call    func.97 ; stack_ast_expr.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.153 ; stack_preprocessor.run.expand.update
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.155 ; array.delete
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if142
.else142:
    jmp    .fi142
.if142:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi142:
    call    func.3 ; rot
    call    func.156 ; array.insert_many
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if143
.else143:
    jmp    .fi143
.if143:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi143:
.fi140:
    call    func.62 ; rot'
.fi138:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.154 ; stack_preprocessor.run.expand.exprs
.fi136:

    pop     rbp
    ret

func.157: ; stack_preprocessor.run.expand.consts'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if144
.else144:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi144
.if144:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if145
.else145:
    jmp    .fi145
.if145:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi145:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if146
.else146:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.2 ; swp
    jmp    .fi146
.if146:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.108 ; stack_ast_const.*
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.154 ; stack_preprocessor.run.expand.exprs
    call    func.2 ; swp
    call    func.69 ; rot4'
.fi146:
    call    func.4 ; rot4
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.69 ; rot4'
    call    func.157 ; stack_preprocessor.run.expand.consts'
.fi144:

    pop     rbp
    ret

func.158: ; stack_preprocessor.run.expand.consts
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if147
.else147:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi147
.if147:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if148
.else148:
    jmp    .fi148
.if148:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi148:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if149
.else149:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.62 ; rot'
    jmp    .fi149
.if149:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.108 ; stack_ast_const.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.71 ; dup3
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.69 ; rot4'
    call    func.157 ; stack_preprocessor.run.expand.consts'
    call    func.5 ; pop
.fi149:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.158 ; stack_preprocessor.run.expand.consts
.fi147:

    pop     rbp
    ret

func.159: ; stack_preprocessor.run.expand.funcs'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if150
.else150:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi150
.if150:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if151
.else151:
    jmp    .fi151
.if151:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi151:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if152
.else152:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.2 ; swp
    jmp    .fi152
.if152:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.154 ; stack_preprocessor.run.expand.exprs
    call    func.2 ; swp
    call    func.69 ; rot4'
.fi152:
    call    func.4 ; rot4
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.69 ; rot4'
    call    func.159 ; stack_preprocessor.run.expand.funcs'
.fi150:

    pop     rbp
    ret

func.160: ; stack_preprocessor.run.expand.funcs
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if153
.else153:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi153
.if153:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if154
.else154:
    jmp    .fi154
.if154:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi154:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if155
.else155:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.62 ; rot'
    jmp    .fi155
.if155:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.108 ; stack_ast_const.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.71 ; dup3
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.69 ; rot4'
    call    func.159 ; stack_preprocessor.run.expand.funcs'
    call    func.5 ; pop
.fi155:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.160 ; stack_preprocessor.run.expand.funcs
.fi153:

    pop     rbp
    ret

func.161: ; stack_preprocessor.run.expand.special.exprs
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if156
.else156:
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi156
.if156:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if157
.else157:
    jmp    .fi157
.if157:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi157:
    call    func.97 ; stack_ast_expr.*
    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if158
.else158:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if159
.else159:
    call    func.48 ; pop2
    jmp    .fi159
.if159:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.161 ; stack_preprocessor.run.expand.special.exprs
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.161 ; stack_preprocessor.run.expand.special.exprs
    call    func.5 ; pop
.fi159:
    jmp    .fi158
.if158:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.1 ; dup
    mov     rdi, literal.98 ; "__file__"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if160
.else160:
    call    func.1 ; dup
    mov     rdi, literal.99 ; "__line__"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if161
.else161:
    call    func.1 ; dup
    mov     rdi, literal.100 ; "__col__"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if162
.else162:
    call    func.48 ; pop2
    jmp    .fi162
.if162:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.77 ; stack_parser.*
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.51 ; stack_lexer.pos.to_lc
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.34 ; int.show
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.155 ; array.delete
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if163
.else163:
    jmp    .fi163
.if163:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi163:
    call    func.3 ; rot
    call    func.71 ; dup3
    call    func.84 ; stack_ast_expr.&
    call    func.162 ; array.insert
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if164
.else164:
    jmp    .fi164
.if164:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi164:
    call    func.5 ; pop
.fi162:
    jmp    .fi161
.if161:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.77 ; stack_parser.*
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.51 ; stack_lexer.pos.to_lc
    call    func.5 ; pop
    call    func.34 ; int.show
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.155 ; array.delete
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if165
.else165:
    jmp    .fi165
.if165:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi165:
    call    func.3 ; rot
    call    func.71 ; dup3
    call    func.84 ; stack_ast_expr.&
    call    func.162 ; array.insert
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if166
.else166:
    jmp    .fi166
.if166:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi166:
    call    func.5 ; pop
.fi161:
    jmp    .fi160
.if160:
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.77 ; stack_parser.*
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.46 ; "\""
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.46 ; "\""
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.155 ; array.delete
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if167
.else167:
    jmp    .fi167
.if167:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi167:
    call    func.3 ; rot
    call    func.71 ; dup3
    call    func.84 ; stack_ast_expr.&
    call    func.162 ; array.insert
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if168
.else168:
    jmp    .fi168
.if168:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi168:
    call    func.5 ; pop
.fi160:
.fi158:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.161 ; stack_preprocessor.run.expand.special.exprs
.fi156:

    pop     rbp
    ret

func.163: ; stack_preprocessor.run.expand.special
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if169
.else169:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi169
.if169:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if170
.else170:
    jmp    .fi170
.if170:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi170:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if171
.else171:
    call    func.48 ; pop2
    call    func.62 ; rot'
    jmp    .fi171
.if171:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.161 ; stack_preprocessor.run.expand.special.exprs
    call    func.62 ; rot'
.fi171:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.163 ; stack_preprocessor.run.expand.special
.fi169:

    pop     rbp
    ret

func.164: ; stack_preprocessor.run.generate.data.sizeof
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if172
.else172:
    call    func.66 ; pop3
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.34 ; int.show
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if173
.else173:
    jmp    .fi173
.if173:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi173:
    jmp    .fi172
.if172:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if174
.else174:
    jmp    .fi174
.if174:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi174:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.69 ; rot4'
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.71 ; dup3
    call    func.164 ; stack_preprocessor.run.generate.data.sizeof
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.84 ; stack_ast_expr.&
    call    func.53 ; dup2
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if175
.else175:
    jmp    .fi175
.if175:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi175:
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.101 ; "+"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if176
.else176:
    jmp    .fi176
.if176:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi176:
.fi172:

    pop     rbp
    ret

func.165: ; stack_preprocessor.run.generate.data.offset
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if177
.else177:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    jmp    .fi177
.if177:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if178
.else178:
    jmp    .fi178
.if178:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi178:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.102 ; "offset"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.69 ; rot4'
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if179
.else179:
    call    func.53 ; dup2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.2 ; swp
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if180
.else180:
    jmp    .fi180
.if180:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi180:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.102 ; "offset"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.53 ; dup2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.2 ; swp
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if181
.else181:
    jmp    .fi181
.if181:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi181:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.71 ; dup3
    call    func.48 ; pop2
    mov     rdi, literal.101 ; "+"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.165 ; stack_preprocessor.run.generate.data.offset
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if182
.else182:
    jmp    .fi182
.if182:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi182:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if183
.else183:
    jmp    .fi183
.if183:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi183:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if184
.else184:
    jmp    .fi184
.if184:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi184:
    call    func.2 ; swp
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.123 ; stack_ast_feature.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if185
.else185:
    jmp    .fi185
.if185:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi185:
    jmp    .fi179
.if179:
    call    func.2 ; swp
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if186
.else186:
    jmp    .fi186
.if186:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi186:
    call    func.69 ; rot4'
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.165 ; stack_preprocessor.run.generate.data.offset
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.53 ; dup2
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.123 ; stack_ast_feature.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if187
.else187:
    jmp    .fi187
.if187:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi187:
    call    func.5 ; pop
.fi179:
.fi177:

    pop     rbp
    ret

func.166: ; stack_preprocessor.run.generate.data.const
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.71 ; dup3
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.164 ; stack_preprocessor.run.generate.data.sizeof
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.62 ; rot'
    call    func.48 ; pop2
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.112 ; stack_ast.features.append.const
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.165 ; stack_preprocessor.run.generate.data.offset
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.124 ; stack_ast.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.126 ; stack_ast.append
    call    func.48 ; pop2

    pop     rbp
    ret

func.167: ; stack_preprocessor.run.generate.data.getters'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if188
.else188:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    jmp    .fi188
.if188:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if189
.else189:
    jmp    .fi189
.if189:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi189:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if190
.else190:
    jmp    .fi190
.if190:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi190:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.103 ; ".*"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.104 ; "ptr.+"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if191
.else191:
    jmp    .fi191
.if191:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi191:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.62 ; rot'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.102 ; "offset"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.167 ; stack_preprocessor.run.generate.data.getters'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if192
.else192:
    jmp    .fi192
.if192:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi192:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if193
.else193:
    jmp    .fi193
.if193:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi193:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if194
.else194:
    jmp    .fi194
.if194:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi194:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if195
.else195:
    jmp    .fi195
.if195:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi195:
    call    func.3 ; rot
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.123 ; stack_ast_feature.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if196
.else196:
    jmp    .fi196
.if196:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi196:
.fi188:

    pop     rbp
    ret

func.168: ; stack_preprocessor.run.generate.data.setters'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if197
.else197:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    jmp    .fi197
.if197:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if198
.else198:
    jmp    .fi198
.if198:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi198:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.106 ; ".set"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.69 ; rot4'
    call    func.2 ; swp
    mov     rdi, literal.107 ; "pop"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.108 ; "ptr.@"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if199
.else199:
    jmp    .fi199
.if199:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi199:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if200
.else200:
    jmp    .fi200
.if200:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi200:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.109 ; "swp"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.104 ; "ptr.+"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if201
.else201:
    jmp    .fi201
.if201:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi201:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.62 ; rot'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.102 ; "offset"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.109 ; "swp"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.168 ; stack_preprocessor.run.generate.data.setters'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if202
.else202:
    jmp    .fi202
.if202:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi202:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if203
.else203:
    jmp    .fi203
.if203:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi203:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if204
.else204:
    jmp    .fi204
.if204:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi204:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if205
.else205:
    jmp    .fi205
.if205:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi205:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if206
.else206:
    jmp    .fi206
.if206:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi206:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if207
.else207:
    jmp    .fi207
.if207:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi207:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if208
.else208:
    jmp    .fi208
.if208:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi208:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if209
.else209:
    jmp    .fi209
.if209:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi209:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if210
.else210:
    jmp    .fi210
.if210:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi210:
    call    func.3 ; rot
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.120 ; stack_ast_const.&
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.122 ; stack_ast_feature.*
    call    func.123 ; stack_ast_feature.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if211
.else211:
    jmp    .fi211
.if211:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi211:
.fi197:

    pop     rbp
    ret

func.169: ; stack_preprocessor.run.generate.data.init'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if212
.else212:
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if213
.else213:
    jmp    .fi213
.if213:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi213:
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.110 ; "ptr.alloc"
    call    stack_push_addr
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if214
.else214:
    jmp    .fi214
.if214:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi214:
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.48 ; pop2
    jmp    .fi212
.if212:
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.107 ; "pop"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.108 ; "ptr.@"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.3 ; rot
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if215
.else215:
    jmp    .fi215
.if215:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi215:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.91 ; "sizeof"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.3 ; rot
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if216
.else216:
    jmp    .fi216
.if216:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi216:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.109 ; "swp"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.104 ; "ptr.+"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.3 ; rot
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if217
.else217:
    jmp    .fi217
.if217:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi217:
    call    func.102 ; stack_ast_data_field.*
    call    func.103 ; stack_ast_data_field.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.62 ; rot'
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.33 ; string.concat
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.102 ; "offset"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.111 ; "rot"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.111 ; "rot"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    mov     rdi, literal.112 ; "dup"
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.169 ; stack_preprocessor.run.generate.data.init'
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if218
.else218:
    jmp    .fi218
.if218:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi218:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if219
.else219:
    jmp    .fi219
.if219:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi219:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if220
.else220:
    jmp    .fi220
.if220:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi220:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if221
.else221:
    jmp    .fi221
.if221:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi221:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if222
.else222:
    jmp    .fi222
.if222:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi222:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if223
.else223:
    jmp    .fi223
.if223:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi223:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if224
.else224:
    jmp    .fi224
.if224:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi224:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if225
.else225:
    jmp    .fi225
.if225:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi225:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if226
.else226:
    jmp    .fi226
.if226:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi226:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if227
.else227:
    jmp    .fi227
.if227:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi227:
.fi212:

    pop     rbp
    ret

func.170: ; stack_preprocessor.run.generate.data.init
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.89 ; "."
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.113 ; "init"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    call    func.71 ; dup3
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.169 ; stack_preprocessor.run.generate.data.init'
    call    func.3 ; rot
    call    func.4 ; rot4
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.103 ; ".*"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.97 ; stack_ast_expr.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.84 ; stack_ast_expr.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if228
.else228:
    jmp    .fi228
.if228:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi228:
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.4 ; rot4
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.108 ; stack_ast_const.*
    call    func.62 ; rot'
    call    func.48 ; pop2
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.112 ; stack_ast.features.append.const
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.66 ; pop3

    pop     rbp
    ret

func.171: ; stack_preprocessor.run.generate.data.getters
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.167 ; stack_preprocessor.run.generate.data.getters'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.124 ; stack_ast.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.126 ; stack_ast.append
    call    func.48 ; pop2

    pop     rbp
    ret

func.172: ; stack_preprocessor.run.generate.data.setters
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.168 ; stack_preprocessor.run.generate.data.setters'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.124 ; stack_ast.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.126 ; stack_ast.append
    call    func.48 ; pop2

    pop     rbp
    ret

func.173: ; stack_preprocessor.run.generate.data
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if229
.else229:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi229
.if229:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if230
.else230:
    jmp    .fi230
.if230:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi230:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if231
.else231:
    call    func.48 ; pop2
    jmp    .fi231
.if231:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.106 ; stack_ast_data.*
    call    func.3 ; rot
    call    func.2 ; swp
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    call    func.44 ; stack_lexer.init.with_buffer
    call    func.79 ; stack_parser.init.with_lexer
    call    func.71 ; dup3
    call    func.166 ; stack_preprocessor.run.generate.data.const
    call    func.71 ; dup3
    call    func.170 ; stack_preprocessor.run.generate.data.init
    call    func.71 ; dup3
    call    func.171 ; stack_preprocessor.run.generate.data.getters
    call    func.71 ; dup3
    call    func.172 ; stack_preprocessor.run.generate.data.setters
    call    func.48 ; pop2
    call    func.2 ; swp
.fi231:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.173 ; stack_preprocessor.run.generate.data
.fi229:

    pop     rbp
    ret

func.152: ; stack_preprocessor.run'
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.173 ; stack_preprocessor.run.generate.data
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.158 ; stack_preprocessor.run.expand.consts
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.160 ; stack_preprocessor.run.expand.funcs
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.163 ; stack_preprocessor.run.expand.special
    call    func.48 ; pop2

    pop     rbp
    ret

func.174: ; stack_preprocessor.run
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.148 ; stack_preprocessor.run.import
    call    func.53 ; dup2
    call    func.147 ; stack_preprocessor.run.base.consts
    call    func.53 ; dup2
    call    func.152 ; stack_preprocessor.run'
    call    func.48 ; pop2

    pop     rbp
    ret

func.175:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.176:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.177:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.178:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.179:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.180:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.181:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.182:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.183: ; stack_context.init.base
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.175 ; stack_context_data.*
    call    func.176 ; stack_context_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if232
.else232:
    jmp    .fi232
.if232:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi232:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.175 ; stack_context_data.*
    call    func.176 ; stack_context_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if233
.else233:
    jmp    .fi233
.if233:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi233:
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.175 ; stack_context_data.*
    call    func.176 ; stack_context_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if234
.else234:
    jmp    .fi234
.if234:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi234:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.112 ; "dup"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if235
.else235:
    jmp    .fi235
.if235:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi235:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if236
.else236:
    jmp    .fi236
.if236:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi236:
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if237
.else237:
    jmp    .fi237
.if237:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi237:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if238
.else238:
    jmp    .fi238
.if238:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi238:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.109 ; "swp"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if239
.else239:
    jmp    .fi239
.if239:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi239:
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if240
.else240:
    jmp    .fi240
.if240:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi240:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if241
.else241:
    jmp    .fi241
.if241:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi241:
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if242
.else242:
    jmp    .fi242
.if242:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi242:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if243
.else243:
    jmp    .fi243
.if243:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi243:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.111 ; "rot"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if244
.else244:
    jmp    .fi244
.if244:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi244:
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if245
.else245:
    jmp    .fi245
.if245:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi245:
    call    func.1 ; dup
    mov     rdi, literal.116 ; "c"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if246
.else246:
    jmp    .fi246
.if246:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi246:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if247
.else247:
    jmp    .fi247
.if247:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi247:
    call    func.1 ; dup
    mov     rdi, literal.116 ; "c"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if248
.else248:
    jmp    .fi248
.if248:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi248:
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if249
.else249:
    jmp    .fi249
.if249:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi249:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if250
.else250:
    jmp    .fi250
.if250:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi250:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.117 ; "rot4"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if251
.else251:
    jmp    .fi251
.if251:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi251:
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if252
.else252:
    jmp    .fi252
.if252:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi252:
    call    func.1 ; dup
    mov     rdi, literal.116 ; "c"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if253
.else253:
    jmp    .fi253
.if253:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi253:
    call    func.1 ; dup
    mov     rdi, literal.118 ; "d"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if254
.else254:
    jmp    .fi254
.if254:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi254:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if255
.else255:
    jmp    .fi255
.if255:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi255:
    call    func.1 ; dup
    mov     rdi, literal.116 ; "c"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if256
.else256:
    jmp    .fi256
.if256:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi256:
    call    func.1 ; dup
    mov     rdi, literal.118 ; "d"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if257
.else257:
    jmp    .fi257
.if257:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi257:
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if258
.else258:
    jmp    .fi258
.if258:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi258:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if259
.else259:
    jmp    .fi259
.if259:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi259:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.107 ; "pop"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if260
.else260:
    jmp    .fi260
.if260:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi260:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if261
.else261:
    jmp    .fi261
.if261:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi261:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.119 ; "pick"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if262
.else262:
    jmp    .fi262
.if262:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi262:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if263
.else263:
    jmp    .fi263
.if263:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi263:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if264
.else264:
    jmp    .fi264
.if264:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi264:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.110 ; "ptr.alloc"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if265
.else265:
    jmp    .fi265
.if265:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi265:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if266
.else266:
    jmp    .fi266
.if266:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi266:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if267
.else267:
    jmp    .fi267
.if267:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi267:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.104 ; "ptr.+"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if268
.else268:
    jmp    .fi268
.if268:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi268:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if269
.else269:
    jmp    .fi269
.if269:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi269:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if270
.else270:
    jmp    .fi270
.if270:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi270:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if271
.else271:
    jmp    .fi271
.if271:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi271:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.108 ; "ptr.@"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if272
.else272:
    jmp    .fi272
.if272:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi272:
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if273
.else273:
    jmp    .fi273
.if273:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi273:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if274
.else274:
    jmp    .fi274
.if274:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi274:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if275
.else275:
    jmp    .fi275
.if275:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi275:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if276
.else276:
    jmp    .fi276
.if276:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi276:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.101 ; "+"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if277
.else277:
    jmp    .fi277
.if277:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi277:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if278
.else278:
    jmp    .fi278
.if278:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi278:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if279
.else279:
    jmp    .fi279
.if279:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi279:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if280
.else280:
    jmp    .fi280
.if280:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi280:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.44 ; "-"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if281
.else281:
    jmp    .fi281
.if281:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi281:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if282
.else282:
    jmp    .fi282
.if282:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi282:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if283
.else283:
    jmp    .fi283
.if283:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi283:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if284
.else284:
    jmp    .fi284
.if284:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi284:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.120 ; "*"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if285
.else285:
    jmp    .fi285
.if285:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi285:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if286
.else286:
    jmp    .fi286
.if286:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi286:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if287
.else287:
    jmp    .fi287
.if287:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi287:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if288
.else288:
    jmp    .fi288
.if288:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi288:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.95 ; "/"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if289
.else289:
    jmp    .fi289
.if289:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi289:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if290
.else290:
    jmp    .fi290
.if290:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi290:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if291
.else291:
    jmp    .fi291
.if291:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi291:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if292
.else292:
    jmp    .fi292
.if292:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi292:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.121 ; "%"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if293
.else293:
    jmp    .fi293
.if293:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi293:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if294
.else294:
    jmp    .fi294
.if294:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi294:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if295
.else295:
    jmp    .fi295
.if295:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi295:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if296
.else296:
    jmp    .fi296
.if296:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi296:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.122 ; "|"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if297
.else297:
    jmp    .fi297
.if297:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi297:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if298
.else298:
    jmp    .fi298
.if298:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi298:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if299
.else299:
    jmp    .fi299
.if299:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi299:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if300
.else300:
    jmp    .fi300
.if300:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi300:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.123 ; "&"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if301
.else301:
    jmp    .fi301
.if301:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi301:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if302
.else302:
    jmp    .fi302
.if302:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi302:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if303
.else303:
    jmp    .fi303
.if303:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi303:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if304
.else304:
    jmp    .fi304
.if304:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi304:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.124 ; "^"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if305
.else305:
    jmp    .fi305
.if305:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi305:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if306
.else306:
    jmp    .fi306
.if306:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi306:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if307
.else307:
    jmp    .fi307
.if307:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi307:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if308
.else308:
    jmp    .fi308
.if308:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi308:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.125 ; ">>"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if309
.else309:
    jmp    .fi309
.if309:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi309:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if310
.else310:
    jmp    .fi310
.if310:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi310:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if311
.else311:
    jmp    .fi311
.if311:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi311:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if312
.else312:
    jmp    .fi312
.if312:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi312:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.126 ; "<<"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if313
.else313:
    jmp    .fi313
.if313:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi313:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if314
.else314:
    jmp    .fi314
.if314:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi314:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if315
.else315:
    jmp    .fi315
.if315:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi315:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if316
.else316:
    jmp    .fi316
.if316:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi316:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.127 ; ">"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if317
.else317:
    jmp    .fi317
.if317:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi317:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if318
.else318:
    jmp    .fi318
.if318:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi318:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if319
.else319:
    jmp    .fi319
.if319:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi319:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if320
.else320:
    jmp    .fi320
.if320:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi320:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.128 ; "<"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if321
.else321:
    jmp    .fi321
.if321:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi321:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if322
.else322:
    jmp    .fi322
.if322:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi322:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if323
.else323:
    jmp    .fi323
.if323:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi323:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if324
.else324:
    jmp    .fi324
.if324:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi324:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.129 ; "="
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if325
.else325:
    jmp    .fi325
.if325:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi325:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if326
.else326:
    jmp    .fi326
.if326:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi326:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if327
.else327:
    jmp    .fi327
.if327:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi327:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if328
.else328:
    jmp    .fi328
.if328:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi328:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.130 ; "os.env"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if329
.else329:
    jmp    .fi329
.if329:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi329:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if330
.else330:
    jmp    .fi330
.if330:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi330:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.131 ; "syscall1"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if331
.else331:
    jmp    .fi331
.if331:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi331:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if332
.else332:
    jmp    .fi332
.if332:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi332:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if333
.else333:
    jmp    .fi333
.if333:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi333:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if334
.else334:
    jmp    .fi334
.if334:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi334:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.132 ; "syscall3"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.114 ; "a"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if335
.else335:
    jmp    .fi335
.if335:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi335:
    call    func.1 ; dup
    mov     rdi, literal.115 ; "b"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if336
.else336:
    jmp    .fi336
.if336:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi336:
    call    func.1 ; dup
    mov     rdi, literal.116 ; "c"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if337
.else337:
    jmp    .fi337
.if337:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi337:
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if338
.else338:
    jmp    .fi338
.if338:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi338:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if339
.else339:
    jmp    .fi339
.if339:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi339:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if340
.else340:
    jmp    .fi340
.if340:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi340:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.133 ; "int.&"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if341
.else341:
    jmp    .fi341
.if341:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi341:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if342
.else342:
    jmp    .fi342
.if342:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi342:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if343
.else343:
    jmp    .fi343
.if343:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi343:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.134 ; "int.*"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if344
.else344:
    jmp    .fi344
.if344:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi344:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if345
.else345:
    jmp    .fi345
.if345:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi345:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if346
.else346:
    jmp    .fi346
.if346:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi346:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.135 ; "ptr.&"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if347
.else347:
    jmp    .fi347
.if347:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi347:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if348
.else348:
    jmp    .fi348
.if348:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi348:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if349
.else349:
    jmp    .fi349
.if349:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi349:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.136 ; "ptr.*"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if350
.else350:
    jmp    .fi350
.if350:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi350:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if351
.else351:
    jmp    .fi351
.if351:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi351:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if352
.else352:
    jmp    .fi352
.if352:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi352:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.137 ; "bool.&"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if353
.else353:
    jmp    .fi353
.if353:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi353:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if354
.else354:
    jmp    .fi354
.if354:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi354:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if355
.else355:
    jmp    .fi355
.if355:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi355:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.138 ; "bool.*"
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if356
.else356:
    jmp    .fi356
.if356:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi356:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if357
.else357:
    jmp    .fi357
.if357:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi357:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if358
.else358:
    jmp    .fi358
.if358:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi358:
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.181 ; stack_context.*

    pop     rbp
    ret

func.184: ; stack_context.append.data
    push    rbp
    mov     rbp, rsp

    call    func.176 ; stack_context_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.2 ; swp
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if359
.else359:
    jmp    .fi359
.if359:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi359:

    pop     rbp
    ret

func.185: ; stack_context.append.func
    push    rbp
    mov     rbp, rsp

    call    func.178 ; stack_context_func.&
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.2 ; swp
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.180 ; stack_context_symbol.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if360
.else360:
    jmp    .fi360
.if360:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi360:

    pop     rbp
    ret

func.186: ; stack_context.get_symbol'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if361
.else361:
    call    func.66 ; pop3
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    jmp    .fi361
.if361:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if362
.else362:
    jmp    .fi362
.if362:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi362:
    call    func.179 ; stack_context_symbol.*
    call    func.1 ; dup
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if363
.else363:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if364
.else364:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.81 ; "todo!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.48 ; pop2
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    jmp    .fi364
.if364:
    call    func.5 ; pop
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
.fi364:
    jmp    .fi363
.if363:
    call    func.5 ; pop
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.175 ; stack_context_data.*
    call    func.176 ; stack_context_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
.fi363:
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if365
.else365:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.186 ; stack_context.get_symbol'
    jmp    .fi365
.if365:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if366
.else366:
    jmp    .fi366
.if366:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi366:
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
.fi365:
.fi361:

    pop     rbp
    ret

func.187: ; stack_context.get_symbol
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.186 ; stack_context.get_symbol'

    pop     rbp
    ret

func.188: ; stack_context.showf
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.77 ; stack_parser.*
    call    func.78 ; stack_parser.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.42 ; stack_lexer.*
    call    func.1 ; dup
    call    func.43 ; stack_lexer.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.189 ; string.stderr
    call    func.2 ; swp
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.51 ; stack_lexer.pos.to_lc
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.2 ; swp
    call    func.34 ; int.show
    call    func.189 ; string.stderr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.34 ; int.show
    call    func.189 ; string.stderr
    mov     rdi, literal.139 ; ", Semantic error: "
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.189 ; string.stderr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    call    func.2 ; swp
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop

    pop     rbp
    ret

func.190: ; stack_context.typecheck.data_def_ref
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if367
.else367:
    jmp    .fi367
.if367:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi367:
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if368
.else368:
    jmp    .fi368
.if368:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi368:
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.185 ; stack_context.append.func
    call    func.5 ; pop

    pop     rbp
    ret

func.191: ; stack_context.typecheck.data_def_deref
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.103 ; ".*"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.92 ; "ptr"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if369
.else369:
    jmp    .fi369
.if369:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi369:
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if370
.else370:
    jmp    .fi370
.if370:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi370:
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.185 ; stack_context.append.func
    call    func.5 ; pop

    pop     rbp
    ret

func.192: ; stack_context.typecheck.data_def''
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.187 ; stack_context.get_symbol
    call    func.5 ; pop
    call    stack_pop
    test    rax, rax
    jnz     .if371
.else371:
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.175 ; stack_context_data.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.184 ; stack_context.append.data
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.190 ; stack_context.typecheck.data_def_ref
    call    func.53 ; dup2
    call    func.191 ; stack_context.typecheck.data_def_deref
    jmp    .fi371
.if371:
    call    func.53 ; dup2
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.87 ; "data "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.140 ; " is redefined\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
.fi371:
    call    func.48 ; pop2

    pop     rbp
    ret

func.193: ; stack_context.typecheck.data_def'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if372
.else372:
    call    func.66 ; pop3
    jmp    .fi372
.if372:
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if373
.else373:
    jmp    .fi373
.if373:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi373:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if374
.else374:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.62 ; rot'
    jmp    .fi374
.if374:
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.106 ; stack_ast_data.*
    call    func.3 ; rot
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.192 ; stack_context.typecheck.data_def''
    call    func.5 ; pop
.fi374:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.193 ; stack_context.typecheck.data_def'
.fi372:

    pop     rbp
    ret

func.194: ; stack_context.typecheck.data_def
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.193 ; stack_context.typecheck.data_def'

    pop     rbp
    ret

func.195: ; stack_params.node_to_string'
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if375
.else375:
    call    func.48 ; pop2
    jmp    .fi375
.if375:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if376
.else376:
    jmp    .fi376
.if376:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi376:
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if377
.else377:
    jmp    .fi377
.if377:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi377:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.195 ; stack_params.node_to_string'
.fi375:

    pop     rbp
    ret

func.196: ; stack_params.node_to_string
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.195 ; stack_params.node_to_string'

    pop     rbp
    ret

func.197: ; stack_context.typecheck.func_def''
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.187 ; stack_context.get_symbol
    call    func.5 ; pop
    call    stack_pop
    test    rax, rax
    jnz     .if378
.else378:
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.196 ; stack_params.node_to_string
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.196 ; stack_params.node_to_string
    call    func.2 ; swp
    call    func.69 ; rot4'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.177 ; stack_context_func.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.185 ; stack_context.append.func
    call    func.2 ; swp
    jmp    .fi378
.if378:
    call    func.53 ; dup2
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.140 ; " is redefined\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
.fi378:
    call    func.48 ; pop2

    pop     rbp
    ret

func.198: ; stack_context.typecheck.func_def'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if379
.else379:
    call    func.66 ; pop3
    jmp    .fi379
.if379:
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if380
.else380:
    jmp    .fi380
.if380:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi380:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if381
.else381:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.62 ; rot'
    jmp    .fi381
.if381:
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.3 ; rot
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.197 ; stack_context.typecheck.func_def''
    call    func.5 ; pop
.fi381:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.198 ; stack_context.typecheck.func_def'
.fi379:

    pop     rbp
    ret

func.199: ; stack_context.typecheck.func_def
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.198 ; stack_context.typecheck.func_def'

    pop     rbp
    ret

func.200:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.201:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.202: ; iter.next
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.201 ; iter.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.201 ; iter.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if382
.else382:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi382
.if382:
    call    func.1 ; dup
    call    func.201 ; iter.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.201 ; iter.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.201 ; iter.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.201 ; iter.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
.fi382:

    pop     rbp
    ret

func.203:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.204:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.205: ; string_tuple.get'
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if383
.else383:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi383
.if383:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if384
.else384:
    jmp    .fi384
.if384:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi384:
    call    func.203 ; string_tuple.*
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.204 ; string_tuple.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if385
.else385:
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.205 ; string_tuple.get'
    jmp    .fi385
.if385:
    call    func.5 ; pop
    call    func.204 ; string_tuple.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.62 ; rot'
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi385:
.fi383:

    pop     rbp
    ret

func.206: ; string_tuple.get
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.205 ; string_tuple.get'

    pop     rbp
    ret

func.207: ; stack_context.typecheck.expr.name.infer'
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if386
.else386:
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi386
.if386:
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.8 ; -
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if387
.else387:
    jmp    .fi387
.if387:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi387:
    call    func.49 ; string.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if388
.else388:
    jmp    .fi388
.if388:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi388:
    call    func.49 ; string.*
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.6 ; pick
    call    func.181 ; stack_context.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.187 ; stack_context.get_symbol
    call    func.5 ; pop
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if389
.else389:
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.6 ; pick
    call    func.181 ; stack_context.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.187 ; stack_context.get_symbol
    call    func.5 ; pop
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if390
.else390:
    call    func.72 ; string.=
    jmp    .fi390
.if390:
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi390:
    jmp    .fi389
.if389:
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.206 ; string_tuple.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if391
.else391:
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.72 ; string.=
    jmp    .fi391
.if391:
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.203 ; string_tuple.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.204 ; string_tuple.&
    call    func.85 ; array.append
.fi391:
.fi389:
    call    stack_pop
    test    rax, rax
    jnz     .if392
.else392:
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi392
.if392:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.207 ; stack_context.typecheck.expr.name.infer'
.fi392:
.fi386:

    pop     rbp
    ret

func.208: ; stack_context.typecheck.expr.name.infer
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if393
.else393:
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.207 ; stack_context.typecheck.expr.name.infer'
    jmp    .fi393
.if393:
    call    func.48 ; pop2
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi393:

    pop     rbp
    ret

func.209: ; stack_context.typecheck.infer.showf
    push    rbp
    mov     rbp, rsp

    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.53 ; dup2
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.141 ; " has non matching args, expected ("
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.142 ; ") but got ("
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.143 ; ")\n"
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.5 ; pop

    pop     rbp
    ret

func.211: ; stack_context.typecheck.expr.name.stack_pop'
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if394
.else394:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi394
.if394:
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.212 ; array.pop
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if395
.else395:
    jmp    .fi395
.if395:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi395:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.211 ; stack_context.typecheck.expr.name.stack_pop'
.fi394:

    pop     rbp
    ret

func.213: ; stack_context.typecheck.expr.name.stack_pop
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.211 ; stack_context.typecheck.expr.name.stack_pop'

    pop     rbp
    ret

func.214: ; stack_context.typecheck.expr.name.map
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if396
.else396:
    call    func.69 ; rot4'
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi396
.if396:
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if397
.else397:
    jmp    .fi397
.if397:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi397:
    call    func.49 ; string.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.206 ; string_tuple.get
    call    stack_pop
    test    rax, rax
    jnz     .if398
.else398:
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if399
.else399:
    jmp    .fi399
.if399:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi399:
    jmp    .fi398
.if398:
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.49 ; string.*
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if400
.else400:
    jmp    .fi400
.if400:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi400:
.fi398:
    call    func.48 ; pop2
    call    func.4 ; rot4
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.69 ; rot4'
    call    func.214 ; stack_context.typecheck.expr.name.map
.fi396:

    pop     rbp
    ret

func.215: ; stack_context.typecheck.expr.name.stack_add
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.214 ; stack_context.typecheck.expr.name.map
    call    func.128 ; array.extend
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if401
.else401:
    jmp    .fi401
.if401:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi401:

    pop     rbp
    ret

func.216: ; stack_context.typecheck.expr.name
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.187 ; stack_context.get_symbol
    call    func.2 ; swp
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if402
.else402:
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.179 ; stack_context_symbol.*
    call    func.1 ; dup
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if403
.else403:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.144 ; " is not defined\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
    call    func.5 ; pop
    jmp    .fi403
.if403:
    call    func.3 ; rot
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.71 ; dup3
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    call    func.2 ; swp
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.208 ; stack_context.typecheck.expr.name.infer
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if404
.else404:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.213 ; stack_context.typecheck.expr.name.stack_pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.215 ; stack_context.typecheck.expr.name.stack_add
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi404
.if404:
    call    func.5 ; pop
    call    func.180 ; stack_context_symbol.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.177 ; stack_context_func.*
    call    func.178 ; stack_context_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.4 ; rot4
    call    func.62 ; rot'
    call    func.209 ; stack_context.typecheck.infer.showf
.fi404:
.fi403:
    jmp    .fi402
.if402:
    call    func.48 ; pop2
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.144 ; " is not defined\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
    call    func.5 ; pop
.fi402:

    pop     rbp
    ret

func.217: ; stack_context.typecheck.expr.cond.has_boolean
    push    rbp
    mov     rbp, rsp

    call    func.218 ; array.last
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if405
.else405:
    call    func.49 ; string.*
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.72 ; string.=
    jmp    .fi405
.if405:
    call    func.5 ; pop
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi405:

    pop     rbp
    ret

func.219: ; stack_context.typecheck.branch.showf
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    mov     rdi, literal.145 ; "stack mismatch lhs execution (..., "
    call    stack_push_addr
    call    func.188 ; stack_context.showf
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.146 ; ") rhs execution (..., "
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.143 ; ")\n"
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.5 ; pop

    pop     rbp
    ret

func.220: ; stack_context.typecheck.expr.cond.has_boolean.showf
    push    rbp
    mov     rbp, rsp

    call    func.218 ; array.last
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if406
.else406:
    call    func.49 ; string.*
    jmp    .fi406
.if406:
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
.fi406:
    mov     rdi, literal.147 ; "expected type ("
    call    stack_push_addr
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.142 ; ") but got ("
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.143 ; ")\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.2 ; swp
    call    func.188 ; stack_context.showf

    pop     rbp
    ret

func.221: ; array.string.='
    push    rbp
    mov     rbp, rsp

    call    func.71 ; dup3
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if407
.else407:
    call    func.66 ; pop3
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi407
.if407:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if408
.else408:
    jmp    .fi408
.if408:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi408:
    call    func.49 ; string.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.6 ; pick
    call    func.127 ; array.*
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.6 ; pick
    call    func.24 ; int.*
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if409
.else409:
    jmp    .fi409
.if409:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi409:
    call    func.49 ; string.*
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if410
.else410:
    call    func.66 ; pop3
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi410
.if410:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.221 ; array.string.='
.fi410:
.fi407:

    pop     rbp
    ret

func.222: ; array.string.=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if411
.else411:
    call    func.48 ; pop2
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi411
.if411:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.221 ; array.string.='
.fi411:

    pop     rbp
    ret

func.223: ; stack_context.typecheck.expr.cond
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.217 ; stack_context.typecheck.expr.cond.has_boolean
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if412
.else412:
    call    func.1 ; dup
    call    func.212 ; array.pop
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if413
.else413:
    jmp    .fi413
.if413:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi413:
    call    func.1 ; dup
    call    func.224 ; array.copy
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.225 ; stack_context.typecheck.exprs
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.71 ; dup3
    call    func.225 ; stack_context.typecheck.exprs
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.222 ; array.string.=
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if414
.else414:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi414
.if414:
    call    func.219 ; stack_context.typecheck.branch.showf
.fi414:
    jmp    .fi412
.if412:
    call    func.220 ; stack_context.typecheck.expr.cond.has_boolean.showf
.fi412:

    pop     rbp
    ret

func.226: ; stack_context.typecheck.expr
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if415
.else415:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if416
.else416:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if417
.else417:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if418
.else418:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if419
.else419:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.81 ; "todo!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi419
.if419:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.223 ; stack_context.typecheck.expr.cond
.fi419:
    jmp    .fi418
.if418:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.216 ; stack_context.typecheck.expr.name
.fi418:
    jmp    .fi417
.if417:
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.93 ; "bool"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if420
.else420:
    jmp    .fi420
.if420:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi420:
    call    func.5 ; pop
.fi417:
    jmp    .fi416
.if416:
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.148 ; "string"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if421
.else421:
    jmp    .fi421
.if421:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi421:
    call    func.5 ; pop
.fi416:
    jmp    .fi415
.if415:
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.90 ; "int"
    call    stack_push_addr
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if422
.else422:
    jmp    .fi422
.if422:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi422:
    call    func.5 ; pop
.fi415:

    pop     rbp
    ret

func.227: ; stack_context.typecheck.exprs'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.202 ; iter.next
    call    stack_pop
    test    rax, rax
    jnz     .if423
.else423:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi423
.if423:
    call    func.97 ; stack_ast_expr.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.226 ; stack_context.typecheck.expr
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.227 ; stack_context.typecheck.exprs'
.fi423:

    pop     rbp
    ret

func.225: ; stack_context.typecheck.exprs
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.200 ; iter.*
    call    func.227 ; stack_context.typecheck.exprs'

    pop     rbp
    ret

func.210: ; array.string.showf
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if424
.else424:
    call    func.53 ; dup2
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if425
.else425:
    call    func.48 ; pop2
    call    func.48 ; pop2
    jmp    .fi425
.if425:
    call    func.48 ; pop2
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if426
.else426:
    jmp    .fi426
.if426:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi426:
    call    func.49 ; string.*
    call    func.189 ; string.stderr
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.210 ; array.string.showf
.fi425:
    jmp    .fi424
.if424:
    call    func.48 ; pop2
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if427
.else427:
    jmp    .fi427
.if427:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi427:
    call    func.49 ; string.*
    call    func.189 ; string.stderr
    mov     rdi, literal.67 ; ", "
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.210 ; array.string.showf
.fi424:

    pop     rbp
    ret

func.228: ; stack_context.typecheck.rets.showf
    push    rbp
    mov     rbp, rsp

    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.53 ; dup2
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.1 ; dup
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.85 ; "func "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.149 ; " has non matching return, expected ("
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.188 ; stack_context.showf
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.142 ; ") but got ("
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.210 ; array.string.showf
    mov     rdi, literal.143 ; ")\n"
    call    stack_push_addr
    call    func.189 ; string.stderr
    call    func.5 ; pop

    pop     rbp
    ret

func.229: ; stack_context.typecheck.func''
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.196 ; stack_params.node_to_string
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.225 ; stack_context.typecheck.exprs
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.196 ; stack_params.node_to_string
    call    func.2 ; swp
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.222 ; array.string.=
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if428
.else428:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    jmp    .fi428
.if428:
    call    func.228 ; stack_context.typecheck.rets.showf
.fi428:

    pop     rbp
    ret

func.230: ; stack_context.typecheck.func'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if429
.else429:
    call    func.66 ; pop3
    jmp    .fi429
.if429:
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.2 ; swp
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if430
.else430:
    jmp    .fi430
.if430:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi430:
    call    func.122 ; stack_ast_feature.*
    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if431
.else431:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.62 ; rot'
    jmp    .fi431
.if431:
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.3 ; rot
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.229 ; stack_context.typecheck.func''
    call    func.5 ; pop
.fi431:
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.230 ; stack_context.typecheck.func'
.fi429:

    pop     rbp
    ret

func.231: ; stack_context.typecheck.func
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.230 ; stack_context.typecheck.func'

    pop     rbp
    ret

func.232: ; stack_context.typecheck
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.194 ; stack_context.typecheck.data_def
    call    func.53 ; dup2
    call    func.199 ; stack_context.typecheck.func_def
    call    func.53 ; dup2
    call    func.231 ; stack_context.typecheck.func
    call    func.48 ; pop2

    pop     rbp
    ret

func.233:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.234:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.235:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.236:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.237: ; stack_literal.=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.234 ; stack_literal.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.234 ; stack_literal.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.19 ; =
    call    func.62 ; rot'
    call    func.234 ; stack_literal.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.234 ; stack_literal.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.72 ; string.=
    call    func.74 ; and

    pop     rbp
    ret

func.238: ; stack_assembler.init.with_fd
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.93 ; array.init.with_sz
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.235 ; stack_assembler.*

    pop     rbp
    ret

func.239: ; emit
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.35 ; stdlib.fwrite
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if432
.else432:
    jmp    .fi432
.if432:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi432:

    pop     rbp
    ret

func.240: ; stack_assembler.func.name'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if433
.else433:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if434
.else434:
    jmp    .fi434
.if434:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi434:
    call    func.49 ; string.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if435
.else435:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.240 ; stack_assembler.func.name'
    jmp    .fi435
.if435:
    call    func.3 ; rot
    call    func.48 ; pop2
.fi435:
    jmp    .fi433
.if433:
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.40 ; string.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if436
.else436:
    jmp    .fi436
.if436:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi436:
.fi433:

    pop     rbp
    ret

func.241: ; stack_assembler.func.name
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.240 ; stack_assembler.func.name'
    call    func.34 ; int.show
    mov     rdi, literal.150 ; "func."
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat

    pop     rbp
    ret

func.242: ; stack_assembler.literal.name'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if437
.else437:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if438
.else438:
    jmp    .fi438
.if438:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi438:
    call    func.233 ; stack_literal.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.237 ; stack_literal.=
    call    stack_pop
    test    rax, rax
    jnz     .if439
.else439:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.242 ; stack_assembler.literal.name'
    jmp    .fi439
.if439:
    call    func.3 ; rot
    call    func.48 ; pop2
.fi439:
    jmp    .fi437
.if437:
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.234 ; stack_literal.&
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if440
.else440:
    jmp    .fi440
.if440:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi440:
.fi437:

    pop     rbp
    ret

func.243: ; stack_assembler.literal.name
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.242 ; stack_assembler.literal.name'
    call    func.34 ; int.show
    mov     rdi, literal.151 ; "literal."
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat

    pop     rbp
    ret

func.244: ; stack_assembler.emit.expr.number
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.233 ; stack_literal.*
    call    func.243 ; stack_assembler.literal.name
    mov     rdi, literal.152 ; "    mov     rdi, "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.153 ; " ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.245: ; stack_assembler.emit.expr.boolean
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.53 ; dup2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.233 ; stack_literal.*
    call    func.243 ; stack_assembler.literal.name
    mov     rdi, literal.152 ; "    mov     rdi, "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.153 ; " ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.246: ; stack_assembler.emit.expr.string
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.53 ; dup2
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.233 ; stack_literal.*
    call    func.243 ; stack_assembler.literal.name
    mov     rdi, literal.152 ; "    mov     rdi, "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.153 ; " ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.247: ; stack_assembler.emit.pretty_call
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.155 ; "    call    "
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.153 ; " ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat

    pop     rbp
    ret

func.248: ; stack_assembler.emit.expr.name
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.247 ; stack_assembler.emit.pretty_call
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.249: ; stack_assembler.emit.expr.cond
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.157 ; "    test    rax, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.34 ; int.show
    mov     rdi, literal.158 ; "    jnz     .if"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.34 ; int.show
    mov     rdi, literal.159 ; ".else"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.250 ; stack_assembler.emit.exprs
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.34 ; int.show
    mov     rdi, literal.160 ; "    jmp    .fi"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.34 ; int.show
    mov     rdi, literal.161 ; ".if"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.98 ; stack_ast_cond.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.250 ; stack_assembler.emit.exprs
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.34 ; int.show
    mov     rdi, literal.162 ; ".fi"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.66 ; pop3

    pop     rbp
    ret

func.251: ; stack_assembler.emit.expr
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if441
.else441:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if442
.else442:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if443
.else443:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if444
.else444:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if445
.else445:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.66 ; pop3
    jmp    .fi445
.if445:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.95 ; stack_ast_cond.*
    call    func.249 ; stack_assembler.emit.expr.cond
.fi445:
    jmp    .fi444
.if444:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.248 ; stack_assembler.emit.expr.name
.fi444:
    jmp    .fi443
.if443:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.246 ; stack_assembler.emit.expr.string
.fi443:
    jmp    .fi442
.if442:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.245 ; stack_assembler.emit.expr.boolean
.fi442:
    jmp    .fi441
.if441:
    call    func.5 ; pop
    call    func.84 ; stack_ast_expr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.89 ; stack_ast_node.*
    call    func.244 ; stack_assembler.emit.expr.number
.fi441:

    pop     rbp
    ret

func.252: ; stack_assembler.emit.exprs'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if446
.else446:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if447
.else447:
    jmp    .fi447
.if447:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi447:
    call    func.97 ; stack_ast_expr.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.251 ; stack_assembler.emit.expr
    call    func.62 ; rot'
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.252 ; stack_assembler.emit.exprs'
    jmp    .fi446
.if446:
    call    func.66 ; pop3
.fi446:

    pop     rbp
    ret

func.250: ; stack_assembler.emit.exprs
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.252 ; stack_assembler.emit.exprs'

    pop     rbp
    ret

func.253: ; stack_assembler.emit.pretty_func
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.153 ; " ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat

    pop     rbp
    ret

func.254: ; stack_assembler.emit.func
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.253 ; stack_assembler.emit.pretty_func
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.4 ; rot4
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.163 ; "    push    rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.164 ; "    mov     rbp, rsp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.119 ; stack_ast_func.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.250 ; stack_assembler.emit.exprs
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.165 ; "    pop     rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.48 ; pop2

    pop     rbp
    ret

func.255: ; stack_assembler.emit.data
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.103 ; ".*"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.4 ; rot4
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.163 ; "    push    rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.164 ; "    mov     rbp, rsp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.167 ; "    ; ref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.165 ; "    pop     rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.118 ; stack_ast_data.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.89 ; stack_ast_node.*
    call    func.90 ; stack_ast_node.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    mov     rdi, literal.105 ; ".&"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.4 ; rot4
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.163 ; "    push    rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.164 ; "    mov     rbp, rsp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.167 ; "    ; ref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.165 ; "    pop     rbp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.2 ; swp
    call    func.48 ; pop2

    pop     rbp
    ret

func.256: ; stack_assembler.emit.feature
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if448
.else448:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if449
.else449:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if450
.else450:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if451
.else451:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.81 ; "todo!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.66 ; pop3
    jmp    .fi451
.if451:
    call    func.66 ; pop3
.fi451:
    jmp    .fi450
.if450:
    call    func.66 ; pop3
.fi450:
    jmp    .fi449
.if449:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.100 ; stack_ast_func.*
    call    func.254 ; stack_assembler.emit.func
.fi449:
    jmp    .fi448
.if448:
    call    func.5 ; pop
    call    func.123 ; stack_ast_feature.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.106 ; stack_ast_data.*
    call    func.255 ; stack_assembler.emit.data
.fi448:

    pop     rbp
    ret

func.257: ; stack_assembler.emit.ast.features'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if452
.else452:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if453
.else453:
    jmp    .fi453
.if453:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi453:
    call    func.122 ; stack_ast_feature.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.256 ; stack_assembler.emit.feature
    call    func.62 ; rot'
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.257 ; stack_assembler.emit.ast.features'
    jmp    .fi452
.if452:
    call    func.66 ; pop3
.fi452:

    pop     rbp
    ret

func.258: ; stack_assembler.emit.ast.features
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.257 ; stack_assembler.emit.ast.features'

    pop     rbp
    ret

func.259: ; stack_assembler.emit.ast
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.171 ; "section '.text' executable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.125 ; stack_ast.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    call    func.258 ; stack_assembler.emit.ast.features
    call    func.48 ; pop2

    pop     rbp
    ret

func.260: ; stack_assembler.emit.string.interpret'
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if454
.else454:
    call    func.48 ; pop2
    jmp    .fi454
.if454:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.50 ; string.!!
    mov     rdi, literal.47 ; 92
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if455
.else455:
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.261 ; string.substr
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    jmp    .fi455
.if455:
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.50 ; string.!!
    call    func.1 ; dup
    mov     rdi, literal.172 ; 110
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if456
.else456:
    call    func.1 ; dup
    mov     rdi, literal.173 ; 116
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if457
.else457:
    call    func.1 ; dup
    mov     rdi, literal.174 ; 98
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if458
.else458:
    call    func.1 ; dup
    mov     rdi, literal.175 ; 102
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if459
.else459:
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.261 ; string.substr
    jmp    .fi459
.if459:
    call    func.5 ; pop
    mov     rdi, literal.176 ; "\f"
    call    stack_push_addr
.fi459:
    jmp    .fi458
.if458:
    call    func.5 ; pop
    mov     rdi, literal.177 ; "\b"
    call    stack_push_addr
.fi458:
    jmp    .fi457
.if457:
    call    func.5 ; pop
    mov     rdi, literal.178 ; "\t"
    call    stack_push_addr
.fi457:
    jmp    .fi456
.if456:
    call    func.5 ; pop
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
.fi456:
    call    func.3 ; rot
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
.fi455:
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.260 ; stack_assembler.emit.string.interpret'
.fi454:

    pop     rbp
    ret

func.262: ; stack_assembler.emit.string.interpret
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.8 ; -
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    call    func.261 ; string.substr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.260 ; stack_assembler.emit.string.interpret'

    pop     rbp
    ret

func.263: ; stack_assembler.emit.literal.string.helper'
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if460
.else460:
    call    func.48 ; pop2
    jmp    .fi460
.if460:
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if461
.else461:
    call    func.2 ; swp
    jmp    .fi461
.if461:
    call    func.3 ; rot
    mov     rdi, literal.30 ; ","
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.62 ; rot'
    call    func.2 ; swp
.fi461:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.50 ; string.!!
    call    func.34 ; int.show
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.263 ; stack_assembler.emit.literal.string.helper'
.fi460:

    pop     rbp
    ret

func.264: ; stack_assembler.emit.literal.string.helper
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if462
.else462:
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.263 ; stack_assembler.emit.literal.string.helper'
    mov     rdi, literal.179 ; ",0"
    call    stack_push_addr
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.265 ; mod
    call    func.8 ; -
    call    func.131 ; string.repeat
    call    func.33 ; string.concat
    call    func.33 ; string.concat
    jmp    .fi462
.if462:
    call    func.48 ; pop2
    mov     rdi, literal.180 ; "0"
    call    stack_push_addr
    call    func.33 ; string.concat
.fi462:

    pop     rbp
    ret

func.266: ; stack_assembler.emit.literal
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.234 ; stack_literal.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.2 ; swp
    call    func.234 ; stack_literal.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if463
.else463:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if464
.else464:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if465
.else465:
    mov     rdi, literal.18 ; "stack.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.20 ; 3256
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.66 ; pop3
    call    func.5 ; pop
    jmp    .fi465
.if465:
    call    func.5 ; pop
    call    func.262 ; stack_assembler.emit.string.interpret
    mov     rdi, literal.151 ; "literal."
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.34 ; int.show
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.33 ; string.concat
    mov     rdi, literal.181 ; " dq "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.34 ; int.show
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.239 ; emit
    call    func.71 ; dup3
    mov     rdi, literal.182 ; "          dq string."
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.5 ; pop
    call    func.71 ; dup3
    mov     rdi, literal.183 ; "string."
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.33 ; string.concat
    mov     rdi, literal.184 ; " db "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.264 ; stack_assembler.emit.literal.string.helper
    call    func.53 ; dup2
    call    func.239 ; emit
    call    func.5 ; pop
    call    func.66 ; pop3
.fi465:
    jmp    .fi464
.if464:
    call    func.5 ; pop
    mov     rdi, literal.151 ; "literal."
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.181 ; " dq "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    mov     rdi, literal.53 ; "true"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if466
.else466:
    mov     rdi, literal.180 ; "0"
    call    stack_push_addr
    jmp    .fi466
.if466:
    mov     rdi, literal.185 ; "1"
    call    stack_push_addr
.fi466:
    call    func.33 ; string.concat
    call    func.239 ; emit
.fi464:
    jmp    .fi463
.if463:
    call    func.5 ; pop
    mov     rdi, literal.151 ; "literal."
    call    stack_push_addr
    call    func.4 ; rot4
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.181 ; " dq "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
.fi463:

    pop     rbp
    ret

func.267: ; stack_assembler.emit.literals'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if467
.else467:
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if468
.else468:
    jmp    .fi468
.if468:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi468:
    call    func.233 ; stack_literal.*
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.266 ; stack_assembler.emit.literal
    call    func.3 ; rot
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.267 ; stack_assembler.emit.literals'
    jmp    .fi467
.if467:
    call    func.66 ; pop3
.fi467:

    pop     rbp
    ret

func.268: ; stack_assembler.emit.literals
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.186 ; "section '.data'"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.236 ; stack_assembler.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.127 ; array.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.267 ; stack_assembler.emit.literals'

    pop     rbp
    ret

func.269: ; stack_assembler.emit
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.187 ; "format ELF64"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.270 ; stack_assembler.emit.allocator
    call    func.1 ; dup
    call    func.271 ; stack_assembler.emit.entry
    call    func.1 ; dup
    call    func.272 ; stack_assembler.emit.keywords
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.259 ; stack_assembler.emit.ast
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.268 ; stack_assembler.emit.literals
    call    func.48 ; pop2

    pop     rbp
    ret

func.273:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.274:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.275: ; stack_args.init.empty
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.273 ; stack_args.*

    pop     rbp
    ret

func.276: ; stack_args.usage
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.188 ; "usage: slc [option] [input]\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.189 ; "stack lang compiler\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.190 ; "options:\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.191 ; "  -h, --help\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.192 ; "      print this help message\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.193 ; "  -l, --lexer\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.194 ; "      flag to stop on the lexer phase\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.195 ; "  -p, --parser\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.196 ; "      flag to stop on the parser phase\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.197 ; "  -P, --preprocessor\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.198 ; "      flag to stop on the preprocessor phase\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.199 ; "  -t, --typecheck\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.200 ; "      flag to stop on the typecheck phase\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.201 ; "  -a, --assembler\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.202 ; "      flag to stop on the assembler phase\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.203 ; "  i, input\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.204 ; "      the input file\n"
    call    stack_push_addr
    call    func.76 ; string.stdout
    mov     rdi, literal.63 ; "\n"
    call    stack_push_addr
    call    func.76 ; string.stdout

    pop     rbp
    ret

func.277: ; stack_args.parse'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if469
.else469:
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.134 ; array.get
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if470
.else470:
    jmp    .fi470
.if470:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi470:
    call    func.26 ; ptr.*
    call    func.1 ; dup
    call    func.278 ; ptr.strlen
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*
    call    func.1 ; dup
    mov     rdi, literal.205 ; "--help"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.206 ; "-h"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if471
.else471:
    call    func.1 ; dup
    mov     rdi, literal.207 ; "--lexer"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.208 ; "-l"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if472
.else472:
    call    func.1 ; dup
    mov     rdi, literal.209 ; "--parser"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.210 ; "-p"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if473
.else473:
    call    func.1 ; dup
    mov     rdi, literal.211 ; "--preprocessor"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.212 ; "-P"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if474
.else474:
    call    func.1 ; dup
    mov     rdi, literal.213 ; "--typecheck"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.214 ; "-t"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if475
.else475:
    call    func.1 ; dup
    mov     rdi, literal.215 ; "--assembler"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.216 ; "-a"
    call    stack_push_addr
    call    func.72 ; string.=
    call    func.3 ; rot
    call    func.58 ; or
    call    stack_pop
    test    rax, rax
    jnz     .if476
.else476:
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if477
.else477:
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.62 ; rot'
    jmp    .fi477
.if477:
    call    func.69 ; rot4'
    call    func.276 ; stack_args.usage
    mov     rdi, literal.217 ; "Got unexpected CLI argument: `"
    call    stack_push_addr
    call    func.2 ; swp
    call    func.33 ; string.concat
    mov     rdi, literal.218 ; "`\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.189 ; string.stderr
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi477:
    jmp    .fi476
.if476:
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
.fi476:
    jmp    .fi475
.if475:
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
.fi475:
    jmp    .fi474
.if474:
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
.fi474:
    jmp    .fi473
.if473:
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
.fi473:
    jmp    .fi472
.if472:
    call    func.4 ; rot4
    call    func.1 ; dup
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    call    func.2 ; swp
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.27 ; bool.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.5 ; pop
.fi472:
    jmp    .fi471
.if471:
    call    func.5 ; pop
    call    func.276 ; stack_args.usage
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi471:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.3 ; rot
    call    func.277 ; stack_args.parse'
    jmp    .fi469
.if469:
    call    func.48 ; pop2
.fi469:

    pop     rbp
    ret

func.279: ; stack_args.parse
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.4 ; rot4
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.127 ; array.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.275 ; stack_args.init.empty
    call    func.277 ; stack_args.parse'

    pop     rbp
    ret

func.0: ; main
    push    rbp
    mov     rbp, rsp

    call    func.279 ; stack_args.parse
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if478
.else478:
    mov     rdi, literal.97 ; "r"
    call    stack_push_addr
    call    func.149 ; stdlib.fopen
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if479
.else479:
    jmp    .fi479
.if479:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi479:
    jmp    .fi478
.if478:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
.fi478:
    call    func.1 ; dup
    call    func.150 ; stdlib.fread.<eof>
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if480
.else480:
    jmp    .fi480
.if480:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi480:
    call    func.2 ; swp
    call    func.151 ; stdlib.fclose
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if481
.else481:
    jmp    .fi481
.if481:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi481:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.49 ; string.*
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if482
.else482:
    jmp    .fi482
.if482:
    call    func.5 ; pop
    mov     rdi, literal.219 ; "stdin"
    call    stack_push_addr
.fi482:
    call    func.2 ; swp
    call    func.62 ; rot'
    call    func.44 ; stack_lexer.init.with_buffer
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    stack_pop
    test    rax, rax
    jnz     .if483
.else483:
    jmp    .fi483
.if483:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.75 ; stack_lexer.dump
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.2 ; swp
.fi483:
    call    func.2 ; swp
    call    func.79 ; stack_parser.init.with_lexer
    call    func.116 ; stack_parser.parse
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if484
.else484:
    jmp    .fi484
.if484:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi484:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    stack_pop
    test    rax, rax
    jnz     .if485
.else485:
    jmp    .fi485
.if485:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.142 ; stack_ast.dump
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.2 ; swp
.fi485:
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.20 ; ptr.alloc
    call    func.143 ; stack_preprocessor.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.174 ; stack_preprocessor.run
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    stack_pop
    test    rax, rax
    jnz     .if486
.else486:
    jmp    .fi486
.if486:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.142 ; stack_ast.dump
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
    call    func.2 ; swp
.fi486:
    call    func.2 ; swp
    call    func.183 ; stack_context.init.base
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.232 ; stack_context.typecheck
    call    func.182 ; stack_context.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if487
.else487:
    jmp    .fi487
.if487:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi487:
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    stack_pop
    test    rax, rax
    jnz     .if488
.else488:
    jmp    .fi488
.if488:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi488:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.238 ; stack_assembler.init.with_fd
    call    func.2 ; swp
    call    func.269 ; stack_assembler.emit
    call    func.1 ; dup
    call    func.274 ; stack_args.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.28 ; bool.*
    call    stack_pop
    test    rax, rax
    jnz     .if489
.else489:
    jmp    .fi489
.if489:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi489:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr

    pop     rbp
    ret

func.271: ; stack_assembler.emit.entry
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.220 ; "section '.data' writeable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.221 ; "stack_env dq 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.222 ; "; Define some constants"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.223 ; "loc_0 = 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.224 ; "loc_1 = 16"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.225 ; "loc_2 = 24"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.226 ; "loc_3 = 32"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.227 ; "loc_4 = 40"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.228 ; "loc_5 = 48"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.229 ; "loc_6 = 56"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.230 ; "loc_7 = 64"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.231 ; "arg_0 = 16"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.232 ; "arg_1 = 24"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.233 ; "arg_2 = 32"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.234 ; "arg_3 = 40"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.235 ; "arg_4 = 48"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.236 ; "arg_5 = 56"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.237 ; "arg_6 = 64"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.238 ; "arg_7 = 72"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.239 ; "; Define entry point"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.171 ; "section '.text' executable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.240 ; "public _start"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.241 ; "_start:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.242 ; "    ; Initialize the memory"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.243 ; "    call allocator_init"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.244 ; "    ; store argc on the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.245 ; "    mov     rdi, qword [rsp]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.246 ; "    ; store argv on the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.247 ; "    mov     rdi, rsp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.248 ; "    add     rdi, 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.249 ; "    ; store env in stack_env"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.250 ; "    mov     rax, qword [rsp]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.251 ; "    shl     rax, 3"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.247 ; "    mov     rdi, rsp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.248 ; "    add     rdi, 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.252 ; "    add     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.248 ; "    add     rdi, 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.253 ; "    mov     qword [stack_env], rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.254 ; "    ; Call the main method"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.255 ; "main"
    call    stack_push_addr
    call    func.247 ; stack_assembler.emit.pretty_call
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.256 ; "    ; Exit the program"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.257 ; "    mov     rax, 60"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.270: ; stack_assembler.emit.allocator
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.220 ; "section '.data' writeable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.259 ; "; memory layout"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.260 ; "stack_pos dq 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.261 ; "stack_end dq 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.262 ; "heap_pos dq 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.263 ; "heap_end dq 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.171 ; "section '.text' executable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.265 ; "; allocator_init"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.266 ; ";   INPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.267 ; ";   OUTPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.268 ; "allocator_init:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.271 ; "    ; allocate the stack 64K"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.272 ; "    mov     rax, 12                    ; brk"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.273 ; "    mov     rdi, 0                     ; increment = 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.274 ; "    mov     [stack_pos], rax           ; save the current position of the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.275 ; "    mov     [stack_end], rax           ; save the end of the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.272 ; "    mov     rax, 12                    ; brk"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.276 ; "    mov     rdi, 0x10000               ; 64K bytes (larger obj. will fail)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.277 ; "    add     rdi, [stack_end]           ; new end of the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.278 ; "    ; initialize the heap"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.272 ; "    mov     rax, 12                    ; brk"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.273 ; "    mov     rdi, 0                     ; increment = 0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.279 ; "    mov     [heap_pos], rax            ; save the current position of the heap"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.280 ; "    mov     [heap_end], rax            ; save the end of the heap"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.282 ; "; stack push addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.283 ; ";   INPUT: rdi contains the int64 (pointer) that we add to the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.267 ; ";   OUTPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.284 ; "stack_push_addr:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.285 ; "    mov     rsi, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.286 ; "    mov     qword [rsi], rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.287 ; "    add     qword [stack_pos], 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.288 ; "; stack push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.283 ; ";   INPUT: rdi contains the int64 (pointer) that we add to the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.267 ; ";   OUTPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.289 ; "stack_push:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.290 ; "    push    rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.291 ; "    mov     rdi, 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.292 ; "    call    allocate"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.294 ; "    mov     [rax], rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.285 ; "    mov     rsi, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.295 ; "    mov     qword [rsi], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.287 ; "    add     qword [stack_pos], 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.296 ; "; stack peek addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.266 ; ";   INPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.297 ; ";   OUTPUT: rax contains the int64 (pointer) that we pop from the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.298 ; "stack_peek_addr:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.299 ; "    mov     rax, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.300 ; "    mov     rax, qword [rax - 8]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.301 ; "; stack peek"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.266 ; ";   INPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.297 ; ";   OUTPUT: rax contains the int64 (pointer) that we pop from the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.302 ; "stack_peek:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.299 ; "    mov     rax, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.300 ; "    mov     rax, qword [rax - 8]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.303 ; "    mov     rax, qword [rax]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.304 ; "; stack pop addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.266 ; ";   INPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.297 ; ";   OUTPUT: rax contains the int64 (pointer) that we pop from the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.305 ; "stack_pop_addr:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.299 ; "    mov     rax, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.300 ; "    mov     rax, qword [rax - 8]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.306 ; "    sub     qword [stack_pos], 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.307 ; "; stack pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.266 ; ";   INPUT: nothing"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.297 ; ";   OUTPUT: rax contains the int64 (pointer) that we pop from the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.308 ; "stack_pop:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.299 ; "    mov     rax, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.300 ; "    mov     rax, qword [rax - 8]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.303 ; "    mov     rax, qword [rax]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.306 ; "    sub     qword [stack_pos], 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.309 ; "; stack pick"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.310 ; ";   INPUT: rdi contains the index"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.311 ; ";   OUTPUT: rax contains the int64 (pointer) that we pick from the stack"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.312 ; "stack_pick_addr:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.299 ; "    mov     rax, qword [stack_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.313 ; "    shl     rdi, 3 ; multiply index with 8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.314 ; "    sub     rax, rdi ; offset stack_pos with index*8"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.300 ; "    mov     rax, qword [rax - 8]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.315 ; "; allocate"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.316 ; ";   INPUT: rdi contains the size in bytes"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.317 ; ";   OUTPUT: rax points to the newly allocated memory"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.318 ; "allocate:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.320 ; "    ; t0 <- heap_pos"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.321 ; "    mov     rax, qword [heap_pos]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.323 ; "    ; t1 <- t0 + rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.324 ; "    mov     rax, qword [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.325 ; "    add     rax, rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.327 ; ".alloc_do:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.328 ; "    ; cmp t1 <= heap_end"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.329 ; "    mov     rax, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.330 ; "    cmp     rax, qword [heap_end]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.331 ; "    jle     .alloc_ok"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.272 ; "    mov     rax, 12                    ; brk"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.276 ; "    mov     rdi, 0x10000               ; 64K bytes (larger obj. will fail)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.332 ; "    add     rdi, [heap_end]            ; new end of the heap"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.333 ; "    mov     [heap_end], rax            ; save the new end of the heap"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.334 ; "    jmp     .alloc_do"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.335 ; ".alloc_ok:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.336 ; "    ; heap_pos <- t1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.329 ; "    mov     rax, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.337 ; "    mov     qword [heap_pos], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.338 ; "    ; return t0"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.324 ; "    mov     rax, qword [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.272: ; stack_assembler.emit.keywords
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.171 ; "section '.text' executable"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.340 ; "; dup"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.341 ; ";   INPUT: (a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.342 ; ";   OUTPUT: (a, a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.112 ; "dup"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.344 ; "    call    stack_peek_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.345 ; "; swp"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.346 ; ";   INPUT: (a, b)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.347 ; ";   OUTPUT: (b, a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.109 ; "swp"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.348 ; "    ; t0 <- A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.349 ; "    ; t1 <- B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.350 ; "    ; push A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.351 ; "    mov     rdi, [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.352 ; "    ; push B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.353 ; "    mov     rdi, [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.354 ; "; rot"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.355 ; ";   INPUT: (a, b, c)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.356 ; ";   OUTPUT: (b, c, a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.111 ; "rot"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.357 ; "    sub     rsp, 32                    ; allocate 4 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.358 ; "    ; (C B A) -> (B A C)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.348 ; "    ; t0 <- A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.349 ; "    ; t1 <- B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.359 ; "    ; t2 <- C"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.360 ; "    mov     qword [rbp - loc_2], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.352 ; "    ; push B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.353 ; "    mov     rdi, [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.350 ; "    ; push A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.351 ; "    mov     rdi, [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.361 ; "    ; push C"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.362 ; "    mov     rdi, [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.363 ; "    add     rsp, 32                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.364 ; "; rot4"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.365 ; ";   INPUT: (a, b, c, d)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.366 ; ";   OUTPUT: (b, c, d, a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.117 ; "rot4"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.357 ; "    sub     rsp, 32                    ; allocate 4 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.367 ; "    ; (D C B A) -> (C B A D)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.348 ; "    ; t0 <- A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.349 ; "    ; t1 <- B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.359 ; "    ; t2 <- C"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.360 ; "    mov     qword [rbp - loc_2], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.368 ; "    ; t3 <- D"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.369 ; "    mov     qword [rbp - loc_3], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.361 ; "    ; push C"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.362 ; "    mov     rdi, [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.352 ; "    ; push B"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.353 ; "    mov     rdi, [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.350 ; "    ; push A"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.351 ; "    mov     rdi, [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.370 ; "    ; push D"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.371 ; "    mov     rdi, [rbp - loc_3]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.363 ; "    add     rsp, 32                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.372 ; "; pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.341 ; ";   INPUT: (a)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.373 ; ";   OUTPUT: ()"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.107 ; "pop"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.374 ; "; pick"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.375 ; ";   INPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.376 ; ";   OUTPUT: (ptr)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.119 ; "pick"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.377 ; "    call    stack_pick_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.378 ; "; plus"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.101 ; "+"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.252 ; "    add     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.382 ; "; sub"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.44 ; "-"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.383 ; "    pop     rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.384 ; "    sub     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.385 ; "; mul"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.120 ; "*"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.386 ; "    mul     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.387 ; "; div"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.95 ; "/"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.388 ; "    cqo"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.389 ; "    idiv    rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.390 ; "; mod"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.121 ; "%"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.388 ; "    cqo"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.389 ; "    idiv    rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.391 ; "    mov     rdi, rdx"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.392 ; "; and"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.123 ; "&"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.393 ; "    and     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.394 ; "; or"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.122 ; "|"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.395 ; "    or      rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.396 ; "; xor"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.124 ; "^"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.293 ; "    pop     rdi"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.397 ; "    xor     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.398 ; "; shr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.125 ; ">>"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.399 ; "    pop     rcx"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.400 ; "    shr     ax, cl"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.401 ; "; shl"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.126 ; "<<"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.399 ; "    pop     rcx"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.402 ; "    shl     ax, cl"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.403 ; "; greater than"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.404 ; ";   OUTPUT: (bool)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.127 ; ">"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.383 ; "    pop     rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.405 ; "    cmp     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.406 ; "    setg    al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.407 ; "    and     al, 1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.408 ; "    movzx   rax, al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.409 ; "; less than"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.404 ; ";   OUTPUT: (bool)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.128 ; "<"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.383 ; "    pop     rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.405 ; "    cmp     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.410 ; "    setl    al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.407 ; "    and     al, 1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.408 ; "    movzx   rax, al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.409 ; "; less than"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.379 ; ";   INPUT: (int, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.404 ; ";   OUTPUT: (bool)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.129 ; "="
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.381 ; "    push    rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.383 ; "    pop     rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.405 ; "    cmp     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.411 ; "    sete    al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.407 ; "    and     al, 1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.408 ; "    movzx   rax, al"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.412 ; "; memory allocate"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.375 ; ";   INPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.376 ; ";   OUTPUT: (ptr)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.110 ; "ptr.alloc"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.319 ; "    sub     rsp, 16                    ; allocate 2 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.292 ; "    call    allocate"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.339 ; "    add     rsp, 16                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.413 ; "; memory offset"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.414 ; ";   INPUT: (ptr, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.376 ; ";   OUTPUT: (ptr)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.104 ; "ptr.+"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.415 ; "    sub     rsp, 24                    ; allocate 3 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.416 ; "    ; t1 <- int"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.417 ; "    ; t2 <- ptr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.360 ; "    mov     qword [rbp - loc_2], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.418 ; "    ; ptr[0] <- byte a"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.419 ; "    mov     rax, qword [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.420 ; "    mov     rdi, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.252 ; "    add     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.421 ; "    add     rsp, 24                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.422 ; "; memory copy"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.423 ; ";   INPUT: (dst, src, len)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.373 ; ";   OUTPUT: ()"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.108 ; "ptr.@"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.415 ; "    sub     rsp, 24                    ; allocate 3 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.424 ; "    ; t0 <- len"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.425 ; "    ; t1 <- src"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.426 ; "    ; t2 <- dst"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.360 ; "    mov     qword [rbp - loc_2], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.427 ; "    mov     rdi, qword [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.428 ; "    mov     rsi, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.429 ; "    mov     rdx, qword [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.430 ; ".next_byte:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.431 ; "    cmp     rdx, 0                     ; check if done"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.432 ; "    jle     .done"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.433 ; "    mov     al, byte [rsi]             ; get byte from self"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.434 ; "    mov     byte [rdi], al             ; copy byte to new object"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.435 ; "    inc     rdi                        ; increment destination"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.436 ; "    inc     rsi                        ; increment source"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.437 ; "    dec     rdx                        ; decrement count"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.438 ; "    jmp .next_byte"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.439 ; ".done:"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.427 ; "    mov     rdi, qword [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.421 ; "    add     rsp, 24                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.133 ; "int.&"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.134 ; "int.*"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.135 ; "ptr.&"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.136 ; "ptr.*"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.137 ; "bool.&"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.169 ; "    call    stack_pop_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.138 ; "bool.*"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.440 ; "    ; deref data"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.154 ; "    call    stack_push_addr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.130 ; "os.env"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.441 ; "    ; get env vars ptr"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.442 ; "    mov     rdi, qword [stack_env]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.443 ; "; syscall1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.444 ; ";   INPUT: (a, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.131 ; "syscall1"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.357 ; "    sub     rsp, 32                    ; allocate 4 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.445 ; "    ; t0 <- int"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.446 ; "    ; t1 <- a"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.447 ; "    ; syscall1(t0) t1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.324 ; "    mov     rax, qword [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.420 ; "    mov     rdi, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.363 ; "    add     rsp, 32                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.448 ; "; syscall3"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.264 ; ";"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.449 ; ";   INPUT: (a, b, c, int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.380 ; ";   OUTPUT: (int)"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    call    func.1 ; dup
    mov     rdi, literal.132 ; "syscall3"
    call    stack_push_addr
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.241 ; stack_assembler.func.name
    mov     rdi, literal.343 ; ": ; "
    call    stack_push_addr
    call    func.33 ; string.concat
    call    func.2 ; swp
    call    func.33 ; string.concat
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.269 ; "    push    rbp                        ; save return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.270 ; "    mov     rbp, rsp                   ; set up stack frame"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.357 ; "    sub     rsp, 32                    ; allocate 4 local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.445 ; "    ; t0 <- int"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.322 ; "    mov     qword [rbp - loc_0], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.450 ; "    ; t1 <- c"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.326 ; "    mov     qword [rbp - loc_1], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.451 ; "    ; t2 <- b"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.360 ; "    mov     qword [rbp - loc_2], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.452 ; "    ; t3 <- a"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.156 ; "    call    stack_pop"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.369 ; "    mov     qword [rbp - loc_3], rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.453 ; "    ; syscall3(t0) t3 t2 t1"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.324 ; "    mov     rax, qword [rbp - loc_0]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.454 ; "    mov     rdi, qword [rbp - loc_3]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.455 ; "    mov     rsi, qword [rbp - loc_2]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.456 ; "    mov     rdx, qword [rbp - loc_1]"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.258 ; "    syscall"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.168 ; "    mov     rdi, rax"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.170 ; "    call    stack_push"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.363 ; "    add     rsp, 32                    ; deallocate local variables"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.281 ; "    pop     rbp                        ; restore return address"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.166 ; "    ret"
    call    stack_push_addr
    call    func.239 ; emit
    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.239 ; emit
    call    func.5 ; pop

    pop     rbp
    ret

func.53: ; dup2
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.62 ; rot'

    pop     rbp
    ret

func.48: ; pop2
    push    rbp
    mov     rbp, rsp

    call    func.5 ; pop
    call    func.5 ; pop

    pop     rbp
    ret

func.71: ; dup3
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.69 ; rot4'

    pop     rbp
    ret

func.66: ; pop3
    push    rbp
    mov     rbp, rsp

    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop

    pop     rbp
    ret

func.62: ; rot'
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.3 ; rot

    pop     rbp
    ret

func.69: ; rot4'
    push    rbp
    mov     rbp, rsp

    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.4 ; rot4

    pop     rbp
    ret

func.280: ; ptr.realloc
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if490
.else490:
    call    func.20 ; ptr.alloc
    call    func.62 ; rot'
    call    func.22 ; ptr.@
    jmp    .fi490
.if490:
    call    func.48 ; pop2
.fi490:

    pop     rbp
    ret

func.281: ; ptr.memcmp'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if491
.else491:
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.282 ; byte.init
    call    func.2 ; swp
    call    func.282 ; byte.init
    call    func.2 ; swp
    call    func.8 ; -
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if492
.else492:
    call    func.69 ; rot4'
    call    func.66 ; pop3
    jmp    .fi492
.if492:
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.281 ; ptr.memcmp'
.fi492:
    jmp    .fi491
.if491:
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
.fi491:

    pop     rbp
    ret

func.283: ; ptr.memcmp
    push    rbp
    mov     rbp, rsp

    call    func.281 ; ptr.memcmp'

    pop     rbp
    ret

func.284: ; ptr.strlen'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.282 ; byte.init
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if493
.else493:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.284 ; ptr.strlen'
    jmp    .fi493
.if493:
    call    func.5 ; pop
.fi493:

    pop     rbp
    ret

func.278: ; ptr.strlen
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.284 ; ptr.strlen'

    pop     rbp
    ret

func.285: ; abs
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if494
.else494:
    jmp    .fi494
.if494:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.8 ; -
.fi494:

    pop     rbp
    ret

func.265: ; mod
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.11 ; %
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if495
.else495:
    call    func.2 ; swp
    call    func.5 ; pop
    jmp    .fi495
.if495:
    call    func.7 ; +
.fi495:

    pop     rbp
    ret

func.286: ; digit.show
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if496
.else496:
    call    func.1 ; dup
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if497
.else497:
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if498
.else498:
    call    func.1 ; dup
    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if499
.else499:
    call    func.1 ; dup
    mov     rdi, literal.4 ; 4
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if500
.else500:
    call    func.1 ; dup
    mov     rdi, literal.5 ; 5
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if501
.else501:
    call    func.1 ; dup
    mov     rdi, literal.6 ; 6
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if502
.else502:
    call    func.1 ; dup
    mov     rdi, literal.7 ; 7
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if503
.else503:
    call    func.1 ; dup
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if504
.else504:
    call    func.1 ; dup
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if505
.else505:
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    jmp    .fi505
.if505:
    call    func.5 ; pop
    mov     rdi, literal.457 ; "9"
    call    stack_push_addr
.fi505:
    jmp    .fi504
.if504:
    call    func.5 ; pop
    mov     rdi, literal.458 ; "8"
    call    stack_push_addr
.fi504:
    jmp    .fi503
.if503:
    call    func.5 ; pop
    mov     rdi, literal.459 ; "7"
    call    stack_push_addr
.fi503:
    jmp    .fi502
.if502:
    call    func.5 ; pop
    mov     rdi, literal.460 ; "6"
    call    stack_push_addr
.fi502:
    jmp    .fi501
.if501:
    call    func.5 ; pop
    mov     rdi, literal.461 ; "5"
    call    stack_push_addr
.fi501:
    jmp    .fi500
.if500:
    call    func.5 ; pop
    mov     rdi, literal.462 ; "4"
    call    stack_push_addr
.fi500:
    jmp    .fi499
.if499:
    call    func.5 ; pop
    mov     rdi, literal.463 ; "3"
    call    stack_push_addr
.fi499:
    jmp    .fi498
.if498:
    call    func.5 ; pop
    mov     rdi, literal.464 ; "2"
    call    stack_push_addr
.fi498:
    jmp    .fi497
.if497:
    call    func.5 ; pop
    mov     rdi, literal.185 ; "1"
    call    stack_push_addr
.fi497:
    jmp    .fi496
.if496:
    call    func.5 ; pop
    mov     rdi, literal.180 ; "0"
    call    stack_push_addr
.fi496:

    pop     rbp
    ret

func.287: ; int.show'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if506
.else506:
    call    func.1 ; dup
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.265 ; mod
    call    func.2 ; swp
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.10 ; /
    call    func.287 ; int.show'
    call    func.2 ; swp
    call    func.286 ; digit.show
    call    func.33 ; string.concat
    jmp    .fi506
.if506:
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
.fi506:

    pop     rbp
    ret

func.34: ; int.show
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if507
.else507:
    call    func.287 ; int.show'
    jmp    .fi507
.if507:
    call    func.5 ; pop
    mov     rdi, literal.180 ; "0"
    call    stack_push_addr
.fi507:

    pop     rbp
    ret

func.288: ; int.read'
    push    rbp
    mov     rbp, rsp

    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if508
.else508:
    call    func.48 ; pop2
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi508
.if508:
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.50 ; string.!!
    call    func.1 ; dup
    call    func.61 ; byte.isdigit
    call    stack_pop
    test    rax, rax
    jnz     .if509
.else509:
    call    func.66 ; pop3
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi509
.if509:
    mov     rdi, literal.465 ; 48
    call    stack_push_addr
    call    func.8 ; -
    call    func.4 ; rot4
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.9 ; *
    call    func.7 ; +
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.288 ; int.read'
.fi509:
.fi508:

    pop     rbp
    ret

func.289: ; int.read
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if510
.else510:
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.288 ; int.read'
    jmp    .fi510
.if510:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi510:

    pop     rbp
    ret

func.54: ; <=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if511
.else511:
    call    func.19 ; =
    jmp    .fi511
.if511:
    call    func.48 ; pop2
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi511:

    pop     rbp
    ret

func.47: ; >=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if512
.else512:
    call    func.19 ; =
    jmp    .fi512
.if512:
    call    func.48 ; pop2
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi512:

    pop     rbp
    ret

func.59: ; not
    push    rbp
    mov     rbp, rsp

    call    stack_pop
    test    rax, rax
    jnz     .if513
.else513:
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi513
.if513:
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi513:

    pop     rbp
    ret

func.74: ; and
    push    rbp
    mov     rbp, rsp

    call    stack_pop
    test    rax, rax
    jnz     .if514
.else514:
    call    func.5 ; pop
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi514
.if514:
.fi514:

    pop     rbp
    ret

func.58: ; or
    push    rbp
    mov     rbp, rsp

    call    stack_pop
    test    rax, rax
    jnz     .if515
.else515:
    jmp    .fi515
.if515:
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi515:

    pop     rbp
    ret

func.49:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.40:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.290: ; string.memory-needed
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.7 ; 7
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.10 ; /
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.9 ; *

    pop     rbp
    ret

func.291: ; string.init.cstr
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.278 ; ptr.strlen
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*

    pop     rbp
    ret

func.33: ; string.concat
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.290 ; string.memory-needed
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.22 ; ptr.@
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*

    pop     rbp
    ret

func.261: ; string.substr
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.3 ; rot
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.290 ; string.memory-needed
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*

    pop     rbp
    ret

func.292: ; string.repeat'
    push    rbp
    mov     rbp, rsp

    call    func.69 ; rot4'
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if516
.else516:
    call    func.66 ; pop3
    jmp    .fi516
.if516:
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.4 ; rot4
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.33 ; string.concat
    call    func.292 ; string.repeat'
.fi516:

    pop     rbp
    ret

func.131: ; string.repeat
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    call    func.292 ; string.repeat'

    pop     rbp
    ret

func.50: ; string.!!
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.282 ; byte.init

    pop     rbp
    ret

func.72: ; string.=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if517
.else517:
    call    func.66 ; pop3
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi517
.if517:
    call    func.62 ; rot'
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.3 ; rot
    call    func.283 ; ptr.memcmp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
.fi517:

    pop     rbp
    ret

func.293: ; string.starts_with
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if518
.else518:
    call    func.53 ; dup2
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.261 ; string.substr
    call    func.72 ; string.=
    call    func.2 ; swp
    call    func.5 ; pop
    jmp    .fi518
.if518:
    call    func.48 ; pop2
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi518:

    pop     rbp
    ret

func.294: ; string.split_at
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.17 ; >
    call    stack_pop
    test    rax, rax
    jnz     .if519
.else519:
    call    func.53 ; dup2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.261 ; string.substr
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.8 ; -
    call    func.261 ; string.substr
    jmp    .fi519
.if519:
    call    func.5 ; pop
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
.fi519:

    pop     rbp
    ret

func.295: ; string.split'
    push    rbp
    mov     rbp, rsp

    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.294 ; string.split_at
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.293 ; string.starts_with
    call    stack_pop
    test    rax, rax
    jnz     .if520
.else520:
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.3 ; rot
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.295 ; string.split'
    jmp    .fi520
.if520:
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.4 ; rot4
    call    func.5 ; pop
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.294 ; string.split_at
    call    func.2 ; swp
    call    func.5 ; pop
.fi520:

    pop     rbp
    ret

func.296: ; string.split
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.62 ; rot'
    call    func.295 ; string.split'

    pop     rbp
    ret

func.297: ; string.stdin
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.150 ; stdlib.fread.<eof>
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if521
.else521:
    jmp    .fi521
.if521:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi521:

    pop     rbp
    ret

func.76: ; string.stdout
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if522
.else522:
    jmp    .fi522
.if522:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi522:

    pop     rbp
    ret

func.189: ; string.stderr
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if523
.else523:
    jmp    .fi523
.if523:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi523:

    pop     rbp
    ret

func.298: ; sys.read
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.31 ; syscall3

    pop     rbp
    ret

func.299: ; sys.write
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.31 ; syscall3

    pop     rbp
    ret

func.300: ; sys.open
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.31 ; syscall3

    pop     rbp
    ret

func.301: ; sys.close
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.3 ; 3
    call    stack_push_addr
    call    func.30 ; syscall1

    pop     rbp
    ret

func.36: ; sys.exit
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.466 ; 60
    call    stack_push_addr
    call    func.30 ; syscall1
    call    func.5 ; pop

    pop     rbp
    ret

func.149: ; stdlib.fopen
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.97 ; "r"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if524
.else524:
    call    func.1 ; dup
    mov     rdi, literal.467 ; "w"
    call    stack_push_addr
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if525
.else525:
    call    func.48 ; pop2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi525
.if525:
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    mov     rdi, literal.468 ; 64
    call    stack_push_addr
    call    func.13 ; |
    mov     rdi, literal.469 ; 420
    call    stack_push_addr
    call    func.300 ; sys.open
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi525:
    jmp    .fi524
.if524:
    call    func.5 ; pop
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.469 ; 420
    call    stack_push_addr
    call    func.300 ; sys.open
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi524:

    pop     rbp
    ret

func.151: ; stdlib.fclose
    push    rbp
    mov     rbp, rsp

    call    func.301 ; sys.close
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =

    pop     rbp
    ret

func.302: ; stdlib.fread
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.290 ; string.memory-needed
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.69 ; rot4'
    call    func.2 ; swp
    call    func.298 ; sys.read
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.18 ; <
    call    stack_pop
    test    rax, rax
    jnz     .if526
.else526:
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi526
.if526:
    call    func.48 ; pop2
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi526:

    pop     rbp
    ret

func.150: ; stdlib.fread.<eof>
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.470 ; 1024
    call    stack_push_addr
    call    func.302 ; stdlib.fread
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if527
.else527:
    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if528
.else528:
    mov     rdi, literal.470 ; 1024
    call    stack_push_addr
    call    func.47 ; >=
    call    stack_pop
    test    rax, rax
    jnz     .if529
.else529:
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi529
.if529:
    call    func.2 ; swp
    call    func.150 ; stdlib.fread.<eof>
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if530
.else530:
    call    func.33 ; string.concat
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi530
.if530:
    call    func.48 ; pop2
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi530:
.fi529:
    jmp    .fi528
.if528:
    call    func.66 ; pop3
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi528:
    jmp    .fi527
.if527:
    call    func.48 ; pop2
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi527:

    pop     rbp
    ret

func.35: ; stdlib.fwrite
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.40 ; string.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.40 ; string.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.299 ; sys.write
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.47 ; >=

    pop     rbp
    ret

func.127:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop
    mov     rdi, rax
    call    stack_push_addr

    pop     rbp
    ret

func.94:
    push    rbp
    mov     rbp, rsp

    ; ref data
    call    stack_pop_addr
    mov     rdi, rax
    call    stack_push

    pop     rbp
    ret

func.93: ; array.init.with_sz
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    call    func.4 ; rot4
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.127 ; array.*

    pop     rbp
    ret

func.134: ; array.get
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if531
.else531:
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    mov     rdi, literal.74 ; true
    call    stack_push_addr
    jmp    .fi531
.if531:
    call    func.48 ; pop2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi531:

    pop     rbp
    ret

func.224: ; array.copy
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.93 ; array.init.with_sz
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.128 ; array.extend
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if532
.else532:
    jmp    .fi532
.if532:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi532:

    pop     rbp
    ret

func.218: ; array.last
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if533
.else533:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.134 ; array.get
    jmp    .fi533
.if533:
    call    func.48 ; pop2
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.23 ; int.&
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi533:

    pop     rbp
    ret

func.212: ; array.pop
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if534
.else534:
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.155 ; array.delete
    jmp    .fi534
.if534:
    call    func.48 ; pop2
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi534:

    pop     rbp
    ret

func.303: ; array.=
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if535
.else535:
    call    func.48 ; pop2
    mov     rdi, literal.73 ; false
    call    stack_push_addr
    jmp    .fi535
.if535:
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.283 ; ptr.memcmp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
.fi535:

    pop     rbp
    ret

func.162: ; array.insert
    push    rbp
    mov     rbp, rsp

    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.93 ; array.init.with_sz
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.85 ; array.append
    call    func.59 ; not
    call    stack_pop
    test    rax, rax
    jnz     .if536
.else536:
    jmp    .fi536
.if536:
    mov     rdi, literal.64 ; "./lib/stdlib.stack"
    call    stack_push_addr
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.65 ; 463
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.19 ; ":"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.66 ; 23
    call    stack_push_addr
    call    func.34 ; int.show
    call    func.33 ; string.concat
    mov     rdi, literal.21 ; ": "
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.22 ; "panic!\n"
    call    stack_push_addr
    call    func.33 ; string.concat
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.2 ; swp
    call    func.35 ; stdlib.fwrite
    call    func.5 ; pop
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.36 ; sys.exit
.fi536:
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.156 ; array.insert_many

    pop     rbp
    ret

func.156: ; array.insert_many
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.62 ; rot'
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.9 ; *
    call    func.3 ; rot
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.62 ; rot'
    call    func.280 ; ptr.realloc
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.71 ; dup3
    call    func.71 ; dup3
    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.8 ; -
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.20 ; ptr.alloc
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.8 ; -
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.69 ; rot4'
    call    func.66 ; pop3
    call    func.22 ; ptr.@
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.8 ; -
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.69 ; rot4'
    call    func.66 ; pop3
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.71 ; dup3
    call    func.71 ; dup3
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.62 ; rot'
    call    func.48 ; pop2
    call    func.69 ; rot4'
    call    func.71 ; dup3
    call    func.3 ; rot
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.69 ; rot4'
    call    func.66 ; pop3
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr

    pop     rbp
    ret

func.155: ; array.delete
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.3 ; rot
    call    func.21 ; ptr.+
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.53 ; dup2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.3 ; rot
    call    func.21 ; ptr.+
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.53 ; dup2
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.8 ; -
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.8 ; -
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.48 ; pop2
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr

    pop     rbp
    ret

func.128: ; array.extend
    push    rbp
    mov     rbp, rsp

    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.9 ; *
    call    func.3 ; rot
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.62 ; rot'
    call    func.280 ; ptr.realloc
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.62 ; rot'
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.5 ; pop
    call    func.3 ; rot
    call    func.53 ; dup2
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.7 ; +
    call    func.3 ; rot
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.62 ; rot'
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.9 ; *
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr

    pop     rbp
    ret

func.85: ; array.append
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if537
.else537:
    jmp    .fi537
.if537:
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.1 ; dup
    mov     rdi, literal.2 ; 2
    call    stack_push_addr
    call    func.9 ; *
    call    func.1 ; dup
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.54 ; <=
    call    stack_pop
    test    rax, rax
    jnz     .if538
.else538:
    jmp    .fi538
.if538:
    call    func.5 ; pop
    mov     rdi, literal.471 ; 32
    call    stack_push_addr
.fi538:
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.9 ; *
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.4 ; rot4
    call    func.9 ; *
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.280 ; ptr.realloc
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
.fi537:
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.53 ; dup2
    call    func.2 ; swp
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.3 ; rot
    call    func.9 ; *
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.26 ; ptr.*
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.4 ; rot4
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.24 ; int.*
    call    func.2 ; swp
    call    func.69 ; rot4'
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.94 ; array.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr

    pop     rbp
    ret

func.304: ; byte.ispunct'
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.472 ; 33
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.473 ; 35
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.474 ; 36
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.475 ; 37
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.476 ; 38
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.477 ; 39
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.478 ; 42
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.479 ; 43
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.43 ; 45
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.480 ; 46
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.481 ; 47
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.482 ; 58
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.483 ; 59
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.466 ; 60
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.484 ; 61
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.485 ; 62
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.486 ; 63
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.468 ; 64
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.487 ; 91
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.47 ; 92
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.488 ; 93
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.489 ; 94
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.490 ; 95
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.491 ; 96
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.492 ; 123
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.493 ; 124
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.494 ; 125
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.495 ; 126
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or
    call    func.58 ; or

    pop     rbp
    ret

func.282: ; byte.init
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.62 ; rot'
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.24 ; int.*

    pop     rbp
    ret

func.61: ; byte.isdigit
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.465 ; 48
    call    stack_push_addr
    call    func.47 ; >=
    call    func.2 ; swp
    mov     rdi, literal.496 ; 57
    call    stack_push_addr
    call    func.54 ; <=
    call    func.74 ; and

    pop     rbp
    ret

func.305: ; byte.isupper
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.497 ; 65
    call    stack_push_addr
    call    func.47 ; >=
    call    func.2 ; swp
    mov     rdi, literal.498 ; 90
    call    stack_push_addr
    call    func.54 ; <=
    call    func.74 ; and

    pop     rbp
    ret

func.306: ; byte.islower
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.499 ; 97
    call    stack_push_addr
    call    func.47 ; >=
    call    func.2 ; swp
    mov     rdi, literal.500 ; 122
    call    stack_push_addr
    call    func.54 ; <=
    call    func.74 ; and

    pop     rbp
    ret

func.307: ; byte.isletter
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.305 ; byte.isupper
    call    func.2 ; swp
    call    func.306 ; byte.islower
    call    func.58 ; or

    pop     rbp
    ret

func.308: ; byte.isalnum
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.61 ; byte.isdigit
    call    func.2 ; swp
    call    func.307 ; byte.isletter
    call    func.58 ; or

    pop     rbp
    ret

func.56: ; byte.isspace
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    mov     rdi, literal.9 ; 9
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.10 ; 10
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.471 ; 32
    call    stack_push_addr
    call    func.19 ; =
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.58 ; or
    call    func.58 ; or

    pop     rbp
    ret

func.68: ; byte.isname
    push    rbp
    mov     rbp, rsp

    call    func.1 ; dup
    call    func.308 ; byte.isalnum
    call    func.2 ; swp
    call    func.304 ; byte.ispunct'
    call    func.58 ; or

    pop     rbp
    ret

func.63: ; byte.chr
    push    rbp
    mov     rbp, rsp

    call    func.23 ; int.&
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.290 ; string.memory-needed
    call    func.20 ; ptr.alloc
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.22 ; ptr.@
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.2 ; swp
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.7 ; +
    call    func.20 ; ptr.alloc
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.7 ; +
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.25 ; ptr.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.3 ; rot
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.21 ; ptr.+
    call    func.2 ; swp
    call    func.23 ; int.&
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.22 ; ptr.@
    call    func.5 ; pop
    call    func.49 ; string.*

    pop     rbp
    ret

func.309: ; os.env.get'
    push    rbp
    mov     rbp, rsp

    call    func.2 ; swp
    call    func.1 ; dup
    mov     rdi, literal.8 ; 8
    call    stack_push_addr
    call    func.9 ; *
    call    func.29 ; os.env
    call    func.2 ; swp
    call    func.21 ; ptr.+
    call    func.1 ; dup
    call    func.24 ; int.*
    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.19 ; =
    call    stack_pop
    test    rax, rax
    jnz     .if539
.else539:
    call    func.26 ; ptr.*
    call    func.291 ; string.init.cstr
    mov     rdi, literal.129 ; "="
    call    stack_push_addr
    call    func.296 ; string.split
    call    func.2 ; swp
    call    func.4 ; rot4
    call    func.1 ; dup
    call    func.3 ; rot
    call    func.72 ; string.=
    call    stack_pop
    test    rax, rax
    jnz     .if540
.else540:
    call    func.2 ; swp
    call    func.5 ; pop
    call    func.2 ; swp
    mov     rdi, literal.1 ; 1
    call    stack_push_addr
    call    func.7 ; +
    call    func.2 ; swp
    call    func.309 ; os.env.get'
    jmp    .fi540
.if540:
    call    func.5 ; pop
    call    func.2 ; swp
    call    func.5 ; pop
    mov     rdi, literal.74 ; true
    call    stack_push_addr
.fi540:
    jmp    .fi539
.if539:
    call    func.66 ; pop3
    mov     rdi, literal.23 ; ""
    call    stack_push_addr
    mov     rdi, literal.73 ; false
    call    stack_push_addr
.fi539:

    pop     rbp
    ret

func.146: ; os.env.get
    push    rbp
    mov     rbp, rsp

    mov     rdi, literal.0 ; 0
    call    stack_push_addr
    call    func.2 ; swp
    call    func.309 ; os.env.get'

    pop     rbp
    ret

section '.data'

literal.0 dq 0
literal.1 dq 1
literal.2 dq 2
literal.3 dq 3
literal.4 dq 4
literal.5 dq 5
literal.6 dq 6
literal.7 dq 7
literal.8 dq 8
literal.9 dq 9
literal.10 dq 10
literal.11 dq 11
literal.12 dq 12
literal.13 dq 13
literal.14 dq 14
literal.15 dq 15
literal.16 dq 16
literal.17 dq 17
literal.18 dq 11
          dq string.18
string.18 db 115,116,97,99,107,46,115,116,97,99,107,0,0,0,0,0
literal.19 dq 1
          dq string.19
string.19 db 58,0,0,0,0,0,0,0
literal.20 dq 3256
literal.21 dq 2
          dq string.21
string.21 db 58,32,0,0,0,0,0,0
literal.22 dq 7
          dq string.22
string.22 db 112,97,110,105,99,33,10,0
literal.23 dq 0
          dq string.23
string.23 db 0
literal.24 dq 5
          dq string.24
string.24 db 67,79,78,83,84,0,0,0
literal.25 dq 6
          dq string.25
string.25 db 73,77,80,79,82,84,0,0
literal.26 dq 4
          dq string.26
string.26 db 68,65,84,65,0,0,0,0
literal.27 dq 2
          dq string.27
string.27 db 70,73,0,0,0,0,0,0
literal.28 dq 4
          dq string.28
string.28 db 69,76,83,69,0,0,0,0
literal.29 dq 2
          dq string.29
string.29 db 73,70,0,0,0,0,0,0
literal.30 dq 1
          dq string.30
string.30 db 44,0,0,0,0,0,0,0
literal.31 dq 1
          dq string.31
string.31 db 41,0,0,0,0,0,0,0
literal.32 dq 1
          dq string.32
string.32 db 40,0,0,0,0,0,0,0
literal.33 dq 3
          dq string.33
string.33 db 69,78,68,0,0,0,0,0
literal.34 dq 2
          dq string.34
string.34 db 73,78,0,0,0,0,0,0
literal.35 dq 4
          dq string.35
string.35 db 70,85,78,67,0,0,0,0
literal.36 dq 4
          dq string.36
string.36 db 78,65,77,69,0,0,0,0
literal.37 dq 6
          dq string.37
string.37 db 83,84,82,73,78,71,0,0
literal.38 dq 7
          dq string.38
string.38 db 66,79,79,76,69,65,78,0
literal.39 dq 6
          dq string.39
string.39 db 78,85,77,66,69,82,0,0
literal.40 dq 7
          dq string.40
string.40 db 73,76,76,69,71,65,76,0
literal.41 dq 5
          dq string.41
string.41 db 60,69,79,70,62,0,0,0
literal.42 dq 26
literal.43 dq 45
literal.44 dq 1
          dq string.44
string.44 db 45,0,0,0,0,0,0,0
literal.45 dq 34
literal.46 dq 1
          dq string.46
string.46 db 34,0,0,0,0,0,0,0
literal.47 dq 92
literal.48 dq 6
          dq string.48
string.48 db 105,109,112,111,114,116,0,0
literal.49 dq 4
          dq string.49
string.49 db 102,117,110,99,0,0,0,0
literal.50 dq 2
          dq string.50
string.50 db 105,110,0,0,0,0,0,0
literal.51 dq 3
          dq string.51
string.51 db 101,110,100,0,0,0,0,0
literal.52 dq 4
          dq string.52
string.52 db 100,97,116,97,0,0,0,0
literal.53 dq 4
          dq string.53
string.53 db 116,114,117,101,0,0,0,0
literal.54 dq 5
          dq string.54
string.54 db 102,97,108,115,101,0,0,0
literal.55 dq 2
          dq string.55
string.55 db 105,102,0,0,0,0,0,0
literal.56 dq 4
          dq string.56
string.56 db 101,108,115,101,0,0,0,0
literal.57 dq 2
          dq string.57
string.57 db 102,105,0,0,0,0,0,0
literal.58 dq 5
          dq string.58
string.58 db 99,111,110,115,116,0,0,0
literal.59 dq 7
          dq string.59
string.59 db 64,105,109,112,111,114,116,0
literal.60 dq 40
literal.61 dq 41
literal.62 dq 44
literal.63 dq 1
          dq string.63
string.63 db 10,0,0,0,0,0,0,0
literal.64 dq 18
          dq string.64
string.64 db 46,47,108,105,98,47,115,116,100,108,105,98,46,115,116,97,99,107,0,0,0,0,0,0
literal.65 dq 463
literal.66 dq 23
literal.67 dq 2
          dq string.67
string.67 db 44,32,0,0,0,0,0,0
literal.68 dq 15
          dq string.68
string.68 db 76,101,120,105,99,97,108,32,69,114,114,111,114,58,32,0
literal.69 dq 19
          dq string.69
string.69 db 85,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,0,0,0,0,0
literal.70 dq 34
          dq string.70
string.70 db 83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,101,119,32,108,105,110,101,32,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0
literal.71 dq 30
          dq string.71
string.71 db 83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,99,104,97,114,97,99,116,101,114,0,0
literal.72 dq 19
          dq string.72
string.72 db 73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,58,32,0,0,0,0,0
literal.73 dq 0
literal.74 dq 1
literal.75 dq 1
          dq string.75
string.75 db 32,0,0,0,0,0,0,0
literal.76 dq 3
          dq string.76
string.76 db 73,70,10,0,0,0,0,0
literal.77 dq 5
          dq string.77
string.77 db 69,76,83,69,10,0,0,0
literal.78 dq 3
          dq string.78
string.78 db 70,73,10,0,0,0,0,0
literal.79 dq 3
          dq string.79
string.79 db 97,114,103,0,0,0,0,0
literal.80 dq 3
          dq string.80
string.80 db 114,101,116,0,0,0,0,0
literal.81 dq 6
          dq string.81
string.81 db 116,111,100,111,33,10,0,0
literal.82 dq 8
          dq string.82
string.82 db 64,105,109,112,111,114,116,32,0,0,0,0,0,0,0,0
literal.83 dq 2
          dq string.83
string.83 db 10,10,0,0,0,0,0,0
literal.84 dq 6
          dq string.84
string.84 db 99,111,110,115,116,32,0,0
literal.85 dq 5
          dq string.85
string.85 db 102,117,110,99,32,0,0,0
literal.86 dq 6
          dq string.86
string.86 db 98,111,100,121,58,10,0,0
literal.87 dq 5
          dq string.87
string.87 db 100,97,116,97,32,0,0,0
literal.88 dq 10
          dq string.88
string.88 db 83,84,65,67,75,95,72,79,77,69,0,0,0,0,0,0
literal.89 dq 1
          dq string.89
string.89 db 46,0,0,0,0,0,0,0
literal.90 dq 3
          dq string.90
string.90 db 105,110,116,0,0,0,0,0
literal.91 dq 6
          dq string.91
string.91 db 115,105,122,101,111,102,0,0
literal.92 dq 3
          dq string.92
string.92 db 112,116,114,0,0,0,0,0
literal.93 dq 4
          dq string.93
string.93 db 98,111,111,108,0,0,0,0
literal.94 dq 4
          dq string.94
string.94 db 47,108,105,98,0,0,0,0
literal.95 dq 1
          dq string.95
string.95 db 47,0,0,0,0,0,0,0
literal.96 dq 5
          dq string.96
string.96 db 115,116,97,99,107,0,0,0
literal.97 dq 1
          dq string.97
string.97 db 114,0,0,0,0,0,0,0
literal.98 dq 8
          dq string.98
string.98 db 95,95,102,105,108,101,95,95,0,0,0,0,0,0,0,0
literal.99 dq 8
          dq string.99
string.99 db 95,95,108,105,110,101,95,95,0,0,0,0,0,0,0,0
literal.100 dq 7
          dq string.100
string.100 db 95,95,99,111,108,95,95,0
literal.101 dq 1
          dq string.101
string.101 db 43,0,0,0,0,0,0,0
literal.102 dq 6
          dq string.102
string.102 db 111,102,102,115,101,116,0,0
literal.103 dq 2
          dq string.103
string.103 db 46,42,0,0,0,0,0,0
literal.104 dq 5
          dq string.104
string.104 db 112,116,114,46,43,0,0,0
literal.105 dq 2
          dq string.105
string.105 db 46,38,0,0,0,0,0,0
literal.106 dq 4
          dq string.106
string.106 db 46,115,101,116,0,0,0,0
literal.107 dq 3
          dq string.107
string.107 db 112,111,112,0,0,0,0,0
literal.108 dq 5
          dq string.108
string.108 db 112,116,114,46,64,0,0,0
literal.109 dq 3
          dq string.109
string.109 db 115,119,112,0,0,0,0,0
literal.110 dq 9
          dq string.110
string.110 db 112,116,114,46,97,108,108,111,99,0,0,0,0,0,0,0
literal.111 dq 3
          dq string.111
string.111 db 114,111,116,0,0,0,0,0
literal.112 dq 3
          dq string.112
string.112 db 100,117,112,0,0,0,0,0
literal.113 dq 4
          dq string.113
string.113 db 105,110,105,116,0,0,0,0
literal.114 dq 1
          dq string.114
string.114 db 97,0,0,0,0,0,0,0
literal.115 dq 1
          dq string.115
string.115 db 98,0,0,0,0,0,0,0
literal.116 dq 1
          dq string.116
string.116 db 99,0,0,0,0,0,0,0
literal.117 dq 4
          dq string.117
string.117 db 114,111,116,52,0,0,0,0
literal.118 dq 1
          dq string.118
string.118 db 100,0,0,0,0,0,0,0
literal.119 dq 4
          dq string.119
string.119 db 112,105,99,107,0,0,0,0
literal.120 dq 1
          dq string.120
string.120 db 42,0,0,0,0,0,0,0
literal.121 dq 1
          dq string.121
string.121 db 37,0,0,0,0,0,0,0
literal.122 dq 1
          dq string.122
string.122 db 124,0,0,0,0,0,0,0
literal.123 dq 1
          dq string.123
string.123 db 38,0,0,0,0,0,0,0
literal.124 dq 1
          dq string.124
string.124 db 94,0,0,0,0,0,0,0
literal.125 dq 2
          dq string.125
string.125 db 62,62,0,0,0,0,0,0
literal.126 dq 2
          dq string.126
string.126 db 60,60,0,0,0,0,0,0
literal.127 dq 1
          dq string.127
string.127 db 62,0,0,0,0,0,0,0
literal.128 dq 1
          dq string.128
string.128 db 60,0,0,0,0,0,0,0
literal.129 dq 1
          dq string.129
string.129 db 61,0,0,0,0,0,0,0
literal.130 dq 6
          dq string.130
string.130 db 111,115,46,101,110,118,0,0
literal.131 dq 8
          dq string.131
string.131 db 115,121,115,99,97,108,108,49,0,0,0,0,0,0,0,0
literal.132 dq 8
          dq string.132
string.132 db 115,121,115,99,97,108,108,51,0,0,0,0,0,0,0,0
literal.133 dq 5
          dq string.133
string.133 db 105,110,116,46,38,0,0,0
literal.134 dq 5
          dq string.134
string.134 db 105,110,116,46,42,0,0,0
literal.135 dq 5
          dq string.135
string.135 db 112,116,114,46,38,0,0,0
literal.136 dq 5
          dq string.136
string.136 db 112,116,114,46,42,0,0,0
literal.137 dq 6
          dq string.137
string.137 db 98,111,111,108,46,38,0,0
literal.138 dq 6
          dq string.138
string.138 db 98,111,111,108,46,42,0,0
literal.139 dq 18
          dq string.139
string.139 db 44,32,83,101,109,97,110,116,105,99,32,101,114,114,111,114,58,32,0,0,0,0,0,0
literal.140 dq 14
          dq string.140
string.140 db 32,105,115,32,114,101,100,101,102,105,110,101,100,10,0,0
literal.141 dq 34
          dq string.141
string.141 db 32,104,97,115,32,110,111,110,32,109,97,116,99,104,105,110,103,32,97,114,103,115,44,32,101,120,112,101,99,116,101,100,32,40,0,0,0,0,0,0
literal.142 dq 11
          dq string.142
string.142 db 41,32,98,117,116,32,103,111,116,32,40,0,0,0,0,0
literal.143 dq 2
          dq string.143
string.143 db 41,10,0,0,0,0,0,0
literal.144 dq 16
          dq string.144
string.144 db 32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,10,0,0,0,0,0,0,0,0
literal.145 dq 35
          dq string.145
string.145 db 115,116,97,99,107,32,109,105,115,109,97,116,99,104,32,108,104,115,32,101,120,101,99,117,116,105,111,110,32,40,46,46,46,44,32,0,0,0,0,0
literal.146 dq 22
          dq string.146
string.146 db 41,32,114,104,115,32,101,120,101,99,117,116,105,111,110,32,40,46,46,46,44,32,0,0
literal.147 dq 15
          dq string.147
string.147 db 101,120,112,101,99,116,101,100,32,116,121,112,101,32,40,0
literal.148 dq 6
          dq string.148
string.148 db 115,116,114,105,110,103,0,0
literal.149 dq 36
          dq string.149
string.149 db 32,104,97,115,32,110,111,110,32,109,97,116,99,104,105,110,103,32,114,101,116,117,114,110,44,32,101,120,112,101,99,116,101,100,32,40,0,0,0,0
literal.150 dq 5
          dq string.150
string.150 db 102,117,110,99,46,0,0,0
literal.151 dq 8
          dq string.151
string.151 db 108,105,116,101,114,97,108,46,0,0,0,0,0,0,0,0
literal.152 dq 17
          dq string.152
string.152 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,0,0,0,0,0,0,0
literal.153 dq 3
          dq string.153
string.153 db 32,59,32,0,0,0,0,0
literal.154 dq 27
          dq string.154
string.154 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,117,115,104,95,97,100,100,114,0,0,0,0,0
literal.155 dq 12
          dq string.155
string.155 db 32,32,32,32,99,97,108,108,32,32,32,32,0,0,0,0
literal.156 dq 21
          dq string.156
string.156 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,111,112,0,0,0
literal.157 dq 20
          dq string.157
string.157 db 32,32,32,32,116,101,115,116,32,32,32,32,114,97,120,44,32,114,97,120,0,0,0,0
literal.158 dq 15
          dq string.158
string.158 db 32,32,32,32,106,110,122,32,32,32,32,32,46,105,102,0
literal.159 dq 5
          dq string.159
string.159 db 46,101,108,115,101,0,0,0
literal.160 dq 14
          dq string.160
string.160 db 32,32,32,32,106,109,112,32,32,32,32,46,102,105,0,0
literal.161 dq 3
          dq string.161
string.161 db 46,105,102,0,0,0,0,0
literal.162 dq 3
          dq string.162
string.162 db 46,102,105,0,0,0,0,0
literal.163 dq 15
          dq string.163
string.163 db 32,32,32,32,112,117,115,104,32,32,32,32,114,98,112,0
literal.164 dq 20
          dq string.164
string.164 db 32,32,32,32,109,111,118,32,32,32,32,32,114,98,112,44,32,114,115,112,0,0,0,0
literal.165 dq 15
          dq string.165
string.165 db 32,32,32,32,112,111,112,32,32,32,32,32,114,98,112,0
literal.166 dq 7
          dq string.166
string.166 db 32,32,32,32,114,101,116,0
literal.167 dq 14
          dq string.167
string.167 db 32,32,32,32,59,32,114,101,102,32,100,97,116,97,0,0
literal.168 dq 20
          dq string.168
string.168 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.169 dq 26
          dq string.169
string.169 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,111,112,95,97,100,100,114,0,0,0,0,0,0
literal.170 dq 22
          dq string.170
string.170 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,117,115,104,0,0
literal.171 dq 26
          dq string.171
string.171 db 115,101,99,116,105,111,110,32,39,46,116,101,120,116,39,32,101,120,101,99,117,116,97,98,108,101,0,0,0,0,0,0
literal.172 dq 110
literal.173 dq 116
literal.174 dq 98
literal.175 dq 102
literal.176 dq 1
          dq string.176
string.176 db 12,0,0,0,0,0,0,0
literal.177 dq 1
          dq string.177
string.177 db 8,0,0,0,0,0,0,0
literal.178 dq 1
          dq string.178
string.178 db 9,0,0,0,0,0,0,0
literal.179 dq 2
          dq string.179
string.179 db 44,48,0,0,0,0,0,0
literal.180 dq 1
          dq string.180
string.180 db 48,0,0,0,0,0,0,0
literal.181 dq 4
          dq string.181
string.181 db 32,100,113,32,0,0,0,0
literal.182 dq 20
          dq string.182
string.182 db 32,32,32,32,32,32,32,32,32,32,100,113,32,115,116,114,105,110,103,46,0,0,0,0
literal.183 dq 7
          dq string.183
string.183 db 115,116,114,105,110,103,46,0
literal.184 dq 4
          dq string.184
string.184 db 32,100,98,32,0,0,0,0
literal.185 dq 1
          dq string.185
string.185 db 49,0,0,0,0,0,0,0
literal.186 dq 15
          dq string.186
string.186 db 115,101,99,116,105,111,110,32,39,46,100,97,116,97,39,0
literal.187 dq 12
          dq string.187
string.187 db 102,111,114,109,97,116,32,69,76,70,54,52,0,0,0,0
literal.188 dq 28
          dq string.188
string.188 db 117,115,97,103,101,58,32,115,108,99,32,91,111,112,116,105,111,110,93,32,91,105,110,112,117,116,93,10,0,0,0,0
literal.189 dq 20
          dq string.189
string.189 db 115,116,97,99,107,32,108,97,110,103,32,99,111,109,112,105,108,101,114,10,0,0,0,0
literal.190 dq 9
          dq string.190
string.190 db 111,112,116,105,111,110,115,58,10,0,0,0,0,0,0,0
literal.191 dq 13
          dq string.191
string.191 db 32,32,45,104,44,32,45,45,104,101,108,112,10,0,0,0
literal.192 dq 30
          dq string.192
string.192 db 32,32,32,32,32,32,112,114,105,110,116,32,116,104,105,115,32,104,101,108,112,32,109,101,115,115,97,103,101,10,0,0
literal.193 dq 14
          dq string.193
string.193 db 32,32,45,108,44,32,45,45,108,101,120,101,114,10,0,0
literal.194 dq 38
          dq string.194
string.194 db 32,32,32,32,32,32,102,108,97,103,32,116,111,32,115,116,111,112,32,111,110,32,116,104,101,32,108,101,120,101,114,32,112,104,97,115,101,10,0,0
literal.195 dq 15
          dq string.195
string.195 db 32,32,45,112,44,32,45,45,112,97,114,115,101,114,10,0
literal.196 dq 39
          dq string.196
string.196 db 32,32,32,32,32,32,102,108,97,103,32,116,111,32,115,116,111,112,32,111,110,32,116,104,101,32,112,97,114,115,101,114,32,112,104,97,115,101,10,0
literal.197 dq 21
          dq string.197
string.197 db 32,32,45,80,44,32,45,45,112,114,101,112,114,111,99,101,115,115,111,114,10,0,0,0
literal.198 dq 45
          dq string.198
string.198 db 32,32,32,32,32,32,102,108,97,103,32,116,111,32,115,116,111,112,32,111,110,32,116,104,101,32,112,114,101,112,114,111,99,101,115,115,111,114,32,112,104,97,115,101,10,0,0,0
literal.199 dq 18
          dq string.199
string.199 db 32,32,45,116,44,32,45,45,116,121,112,101,99,104,101,99,107,10,0,0,0,0,0,0
literal.200 dq 42
          dq string.200
string.200 db 32,32,32,32,32,32,102,108,97,103,32,116,111,32,115,116,111,112,32,111,110,32,116,104,101,32,116,121,112,101,99,104,101,99,107,32,112,104,97,115,101,10,0,0,0,0,0,0
literal.201 dq 18
          dq string.201
string.201 db 32,32,45,97,44,32,45,45,97,115,115,101,109,98,108,101,114,10,0,0,0,0,0,0
literal.202 dq 42
          dq string.202
string.202 db 32,32,32,32,32,32,102,108,97,103,32,116,111,32,115,116,111,112,32,111,110,32,116,104,101,32,97,115,115,101,109,98,108,101,114,32,112,104,97,115,101,10,0,0,0,0,0,0
literal.203 dq 11
          dq string.203
string.203 db 32,32,105,44,32,105,110,112,117,116,10,0,0,0,0,0
literal.204 dq 21
          dq string.204
string.204 db 32,32,32,32,32,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,10,0,0,0
literal.205 dq 6
          dq string.205
string.205 db 45,45,104,101,108,112,0,0
literal.206 dq 2
          dq string.206
string.206 db 45,104,0,0,0,0,0,0
literal.207 dq 7
          dq string.207
string.207 db 45,45,108,101,120,101,114,0
literal.208 dq 2
          dq string.208
string.208 db 45,108,0,0,0,0,0,0
literal.209 dq 8
          dq string.209
string.209 db 45,45,112,97,114,115,101,114,0,0,0,0,0,0,0,0
literal.210 dq 2
          dq string.210
string.210 db 45,112,0,0,0,0,0,0
literal.211 dq 14
          dq string.211
string.211 db 45,45,112,114,101,112,114,111,99,101,115,115,111,114,0,0
literal.212 dq 2
          dq string.212
string.212 db 45,80,0,0,0,0,0,0
literal.213 dq 11
          dq string.213
string.213 db 45,45,116,121,112,101,99,104,101,99,107,0,0,0,0,0
literal.214 dq 2
          dq string.214
string.214 db 45,116,0,0,0,0,0,0
literal.215 dq 11
          dq string.215
string.215 db 45,45,97,115,115,101,109,98,108,101,114,0,0,0,0,0
literal.216 dq 2
          dq string.216
string.216 db 45,97,0,0,0,0,0,0
literal.217 dq 30
          dq string.217
string.217 db 71,111,116,32,117,110,101,120,112,101,99,116,101,100,32,67,76,73,32,97,114,103,117,109,101,110,116,58,32,96,0,0
literal.218 dq 2
          dq string.218
string.218 db 96,10,0,0,0,0,0,0
literal.219 dq 5
          dq string.219
string.219 db 115,116,100,105,110,0,0,0
literal.220 dq 25
          dq string.220
string.220 db 115,101,99,116,105,111,110,32,39,46,100,97,116,97,39,32,119,114,105,116,101,97,98,108,101,0,0,0,0,0,0,0
literal.221 dq 14
          dq string.221
string.221 db 115,116,97,99,107,95,101,110,118,32,100,113,32,48,0,0
literal.222 dq 23
          dq string.222
string.222 db 59,32,68,101,102,105,110,101,32,115,111,109,101,32,99,111,110,115,116,97,110,116,115,0
literal.223 dq 9
          dq string.223
string.223 db 108,111,99,95,48,32,61,32,56,0,0,0,0,0,0,0
literal.224 dq 10
          dq string.224
string.224 db 108,111,99,95,49,32,61,32,49,54,0,0,0,0,0,0
literal.225 dq 10
          dq string.225
string.225 db 108,111,99,95,50,32,61,32,50,52,0,0,0,0,0,0
literal.226 dq 10
          dq string.226
string.226 db 108,111,99,95,51,32,61,32,51,50,0,0,0,0,0,0
literal.227 dq 10
          dq string.227
string.227 db 108,111,99,95,52,32,61,32,52,48,0,0,0,0,0,0
literal.228 dq 10
          dq string.228
string.228 db 108,111,99,95,53,32,61,32,52,56,0,0,0,0,0,0
literal.229 dq 10
          dq string.229
string.229 db 108,111,99,95,54,32,61,32,53,54,0,0,0,0,0,0
literal.230 dq 10
          dq string.230
string.230 db 108,111,99,95,55,32,61,32,54,52,0,0,0,0,0,0
literal.231 dq 10
          dq string.231
string.231 db 97,114,103,95,48,32,61,32,49,54,0,0,0,0,0,0
literal.232 dq 10
          dq string.232
string.232 db 97,114,103,95,49,32,61,32,50,52,0,0,0,0,0,0
literal.233 dq 10
          dq string.233
string.233 db 97,114,103,95,50,32,61,32,51,50,0,0,0,0,0,0
literal.234 dq 10
          dq string.234
string.234 db 97,114,103,95,51,32,61,32,52,48,0,0,0,0,0,0
literal.235 dq 10
          dq string.235
string.235 db 97,114,103,95,52,32,61,32,52,56,0,0,0,0,0,0
literal.236 dq 10
          dq string.236
string.236 db 97,114,103,95,53,32,61,32,53,54,0,0,0,0,0,0
literal.237 dq 10
          dq string.237
string.237 db 97,114,103,95,54,32,61,32,54,52,0,0,0,0,0,0
literal.238 dq 10
          dq string.238
string.238 db 97,114,103,95,55,32,61,32,55,50,0,0,0,0,0,0
literal.239 dq 20
          dq string.239
string.239 db 59,32,68,101,102,105,110,101,32,101,110,116,114,121,32,112,111,105,110,116,0,0,0,0
literal.240 dq 13
          dq string.240
string.240 db 112,117,98,108,105,99,32,95,115,116,97,114,116,0,0,0
literal.241 dq 7
          dq string.241
string.241 db 95,115,116,97,114,116,58,0
literal.242 dq 27
          dq string.242
string.242 db 32,32,32,32,59,32,73,110,105,116,105,97,108,105,122,101,32,116,104,101,32,109,101,109,111,114,121,0,0,0,0,0
literal.243 dq 23
          dq string.243
string.243 db 32,32,32,32,99,97,108,108,32,97,108,108,111,99,97,116,111,114,95,105,110,105,116,0
literal.244 dq 29
          dq string.244
string.244 db 32,32,32,32,59,32,115,116,111,114,101,32,97,114,103,99,32,111,110,32,116,104,101,32,115,116,97,99,107,0,0,0
literal.245 dq 28
          dq string.245
string.245 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,113,119,111,114,100,32,91,114,115,112,93,0,0,0,0
literal.246 dq 29
          dq string.246
string.246 db 32,32,32,32,59,32,115,116,111,114,101,32,97,114,103,118,32,111,110,32,116,104,101,32,115,116,97,99,107,0,0,0
literal.247 dq 20
          dq string.247
string.247 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,114,115,112,0,0,0,0
literal.248 dq 18
          dq string.248
string.248 db 32,32,32,32,97,100,100,32,32,32,32,32,114,100,105,44,32,56,0,0,0,0,0,0
literal.249 dq 28
          dq string.249
string.249 db 32,32,32,32,59,32,115,116,111,114,101,32,101,110,118,32,105,110,32,115,116,97,99,107,95,101,110,118,0,0,0,0
literal.250 dq 28
          dq string.250
string.250 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,115,112,93,0,0,0,0
literal.251 dq 18
          dq string.251
string.251 db 32,32,32,32,115,104,108,32,32,32,32,32,114,97,120,44,32,51,0,0,0,0,0,0
literal.252 dq 20
          dq string.252
string.252 db 32,32,32,32,97,100,100,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.253 dq 34
          dq string.253
string.253 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,115,116,97,99,107,95,101,110,118,93,44,32,114,100,105,0,0,0,0,0,0
literal.254 dq 26
          dq string.254
string.254 db 32,32,32,32,59,32,67,97,108,108,32,116,104,101,32,109,97,105,110,32,109,101,116,104,111,100,0,0,0,0,0,0
literal.255 dq 4
          dq string.255
string.255 db 109,97,105,110,0,0,0,0
literal.256 dq 22
          dq string.256
string.256 db 32,32,32,32,59,32,69,120,105,116,32,116,104,101,32,112,114,111,103,114,97,109,0,0
literal.257 dq 19
          dq string.257
string.257 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,54,48,0,0,0,0,0
literal.258 dq 11
          dq string.258
string.258 db 32,32,32,32,115,121,115,99,97,108,108,0,0,0,0,0
literal.259 dq 15
          dq string.259
string.259 db 59,32,109,101,109,111,114,121,32,108,97,121,111,117,116,0
literal.260 dq 14
          dq string.260
string.260 db 115,116,97,99,107,95,112,111,115,32,100,113,32,48,0,0
literal.261 dq 14
          dq string.261
string.261 db 115,116,97,99,107,95,101,110,100,32,100,113,32,48,0,0
literal.262 dq 13
          dq string.262
string.262 db 104,101,97,112,95,112,111,115,32,100,113,32,48,0,0,0
literal.263 dq 13
          dq string.263
string.263 db 104,101,97,112,95,101,110,100,32,100,113,32,48,0,0,0
literal.264 dq 1
          dq string.264
string.264 db 59,0,0,0,0,0,0,0
literal.265 dq 16
          dq string.265
string.265 db 59,32,97,108,108,111,99,97,116,111,114,95,105,110,105,116,0,0,0,0,0,0,0,0
literal.266 dq 18
          dq string.266
string.266 db 59,32,32,32,73,78,80,85,84,58,32,110,111,116,104,105,110,103,0,0,0,0,0,0
literal.267 dq 19
          dq string.267
string.267 db 59,32,32,32,79,85,84,80,85,84,58,32,110,111,116,104,105,110,103,0,0,0,0,0
literal.268 dq 15
          dq string.268
string.268 db 97,108,108,111,99,97,116,111,114,95,105,110,105,116,58,0
literal.269 dq 60
          dq string.269
string.269 db 32,32,32,32,112,117,115,104,32,32,32,32,114,98,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,114,101,116,117,114,110,32,97,100,100,114,101,115,115,0,0,0,0
literal.270 dq 59
          dq string.270
string.270 db 32,32,32,32,109,111,118,32,32,32,32,32,114,98,112,44,32,114,115,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,115,101,116,32,117,112,32,115,116,97,99,107,32,102,114,97,109,101,0,0,0,0,0
literal.271 dq 28
          dq string.271
string.271 db 32,32,32,32,59,32,97,108,108,111,99,97,116,101,32,116,104,101,32,115,116,97,99,107,32,54,52,75,0,0,0,0
literal.272 dq 44
          dq string.272
string.272 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,49,50,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,98,114,107,0,0,0,0
literal.273 dq 54
          dq string.273
string.273 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,105,110,99,114,101,109,101,110,116,32,61,32,48,0,0
literal.274 dq 79
          dq string.274
string.274 db 32,32,32,32,109,111,118,32,32,32,32,32,91,115,116,97,99,107,95,112,111,115,93,44,32,114,97,120,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,116,104,101,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,115,116,97,99,107,0
literal.275 dq 66
          dq string.275
string.275 db 32,32,32,32,109,111,118,32,32,32,32,32,91,115,116,97,99,107,95,101,110,100,93,44,32,114,97,120,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,115,116,97,99,107,0,0,0,0,0,0
literal.276 dq 74
          dq string.276
string.276 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,48,120,49,48,48,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,54,52,75,32,98,121,116,101,115,32,40,108,97,114,103,101,114,32,111,98,106,46,32,119,105,108,108,32,102,97,105,108,41,0,0,0,0,0,0
literal.277 dq 61
          dq string.277
string.277 db 32,32,32,32,97,100,100,32,32,32,32,32,114,100,105,44,32,91,115,116,97,99,107,95,101,110,100,93,32,32,32,32,32,32,32,32,32,32,32,59,32,110,101,119,32,101,110,100,32,111,102,32,116,104,101,32,115,116,97,99,107,0,0,0
literal.278 dq 25
          dq string.278
string.278 db 32,32,32,32,59,32,105,110,105,116,105,97,108,105,122,101,32,116,104,101,32,104,101,97,112,0,0,0,0,0,0,0
literal.279 dq 78
          dq string.279
string.279 db 32,32,32,32,109,111,118,32,32,32,32,32,91,104,101,97,112,95,112,111,115,93,44,32,114,97,120,32,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,116,104,101,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,104,101,97,112,0,0
literal.280 dq 65
          dq string.280
string.280 db 32,32,32,32,109,111,118,32,32,32,32,32,91,104,101,97,112,95,101,110,100,93,44,32,114,97,120,32,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,104,101,97,112,0,0,0,0,0,0,0
literal.281 dq 63
          dq string.281
string.281 db 32,32,32,32,112,111,112,32,32,32,32,32,114,98,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,114,101,115,116,111,114,101,32,114,101,116,117,114,110,32,97,100,100,114,101,115,115,0
literal.282 dq 17
          dq string.282
string.282 db 59,32,115,116,97,99,107,32,112,117,115,104,32,97,100,100,114,0,0,0,0,0,0,0
literal.283 dq 68
          dq string.283
string.283 db 59,32,32,32,73,78,80,85,84,58,32,114,100,105,32,99,111,110,116,97,105,110,115,32,116,104,101,32,105,110,116,54,52,32,40,112,111,105,110,116,101,114,41,32,116,104,97,116,32,119,101,32,97,100,100,32,116,111,32,116,104,101,32,115,116,97,99,107,0,0,0,0
literal.284 dq 16
          dq string.284
string.284 db 115,116,97,99,107,95,112,117,115,104,95,97,100,100,114,58,0,0,0,0,0,0,0,0
literal.285 dq 34
          dq string.285
string.285 db 32,32,32,32,109,111,118,32,32,32,32,32,114,115,105,44,32,113,119,111,114,100,32,91,115,116,97,99,107,95,112,111,115,93,0,0,0,0,0,0
literal.286 dq 28
          dq string.286
string.286 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,115,105,93,44,32,114,100,105,0,0,0,0
literal.287 dq 32
          dq string.287
string.287 db 32,32,32,32,97,100,100,32,32,32,32,32,113,119,111,114,100,32,91,115,116,97,99,107,95,112,111,115,93,44,32,56,0,0,0,0,0,0,0,0
literal.288 dq 12
          dq string.288
string.288 db 59,32,115,116,97,99,107,32,112,117,115,104,0,0,0,0
literal.289 dq 11
          dq string.289
string.289 db 115,116,97,99,107,95,112,117,115,104,58,0,0,0,0,0
literal.290 dq 15
          dq string.290
string.290 db 32,32,32,32,112,117,115,104,32,32,32,32,114,100,105,0
literal.291 dq 18
          dq string.291
string.291 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,56,0,0,0,0,0,0
literal.292 dq 20
          dq string.292
string.292 db 32,32,32,32,99,97,108,108,32,32,32,32,97,108,108,111,99,97,116,101,0,0,0,0
literal.293 dq 15
          dq string.293
string.293 db 32,32,32,32,112,111,112,32,32,32,32,32,114,100,105,0
literal.294 dq 22
          dq string.294
string.294 db 32,32,32,32,109,111,118,32,32,32,32,32,91,114,97,120,93,44,32,114,100,105,0,0
literal.295 dq 28
          dq string.295
string.295 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,115,105,93,44,32,114,97,120,0,0,0,0
literal.296 dq 17
          dq string.296
string.296 db 59,32,115,116,97,99,107,32,112,101,101,107,32,97,100,100,114,0,0,0,0,0,0,0
literal.297 dq 71
          dq string.297
string.297 db 59,32,32,32,79,85,84,80,85,84,58,32,114,97,120,32,99,111,110,116,97,105,110,115,32,116,104,101,32,105,110,116,54,52,32,40,112,111,105,110,116,101,114,41,32,116,104,97,116,32,119,101,32,112,111,112,32,102,114,111,109,32,116,104,101,32,115,116,97,99,107,0
literal.298 dq 16
          dq string.298
string.298 db 115,116,97,99,107,95,112,101,101,107,95,97,100,100,114,58,0,0,0,0,0,0,0,0
literal.299 dq 34
          dq string.299
string.299 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,115,116,97,99,107,95,112,111,115,93,0,0,0,0,0,0
literal.300 dq 32
          dq string.300
string.300 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,97,120,32,45,32,56,93,0,0,0,0,0,0,0,0
literal.301 dq 12
          dq string.301
string.301 db 59,32,115,116,97,99,107,32,112,101,101,107,0,0,0,0
literal.302 dq 11
          dq string.302
string.302 db 115,116,97,99,107,95,112,101,101,107,58,0,0,0,0,0
literal.303 dq 28
          dq string.303
string.303 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,97,120,93,0,0,0,0
literal.304 dq 16
          dq string.304
string.304 db 59,32,115,116,97,99,107,32,112,111,112,32,97,100,100,114,0,0,0,0,0,0,0,0
literal.305 dq 15
          dq string.305
string.305 db 115,116,97,99,107,95,112,111,112,95,97,100,100,114,58,0
literal.306 dq 32
          dq string.306
string.306 db 32,32,32,32,115,117,98,32,32,32,32,32,113,119,111,114,100,32,91,115,116,97,99,107,95,112,111,115,93,44,32,56,0,0,0,0,0,0,0,0
literal.307 dq 11
          dq string.307
string.307 db 59,32,115,116,97,99,107,32,112,111,112,0,0,0,0,0
literal.308 dq 10
          dq string.308
string.308 db 115,116,97,99,107,95,112,111,112,58,0,0,0,0,0,0
literal.309 dq 12
          dq string.309
string.309 db 59,32,115,116,97,99,107,32,112,105,99,107,0,0,0,0
literal.310 dq 33
          dq string.310
string.310 db 59,32,32,32,73,78,80,85,84,58,32,114,100,105,32,99,111,110,116,97,105,110,115,32,116,104,101,32,105,110,100,101,120,0,0,0,0,0,0,0
literal.311 dq 72
          dq string.311
string.311 db 59,32,32,32,79,85,84,80,85,84,58,32,114,97,120,32,99,111,110,116,97,105,110,115,32,116,104,101,32,105,110,116,54,52,32,40,112,111,105,110,116,101,114,41,32,116,104,97,116,32,119,101,32,112,105,99,107,32,102,114,111,109,32,116,104,101,32,115,116,97,99,107,0,0,0,0,0,0,0,0
literal.312 dq 16
          dq string.312
string.312 db 115,116,97,99,107,95,112,105,99,107,95,97,100,100,114,58,0,0,0,0,0,0,0,0
literal.313 dq 42
          dq string.313
string.313 db 32,32,32,32,115,104,108,32,32,32,32,32,114,100,105,44,32,51,32,59,32,109,117,108,116,105,112,108,121,32,105,110,100,101,120,32,119,105,116,104,32,56,0,0,0,0,0,0
literal.314 dq 52
          dq string.314
string.314 db 32,32,32,32,115,117,98,32,32,32,32,32,114,97,120,44,32,114,100,105,32,59,32,111,102,102,115,101,116,32,115,116,97,99,107,95,112,111,115,32,119,105,116,104,32,105,110,100,101,120,42,56,0,0,0,0
literal.315 dq 10
          dq string.315
string.315 db 59,32,97,108,108,111,99,97,116,101,0,0,0,0,0,0
literal.316 dq 41
          dq string.316
string.316 db 59,32,32,32,73,78,80,85,84,58,32,114,100,105,32,99,111,110,116,97,105,110,115,32,116,104,101,32,115,105,122,101,32,105,110,32,98,121,116,101,115,0,0,0,0,0,0,0
literal.317 dq 52
          dq string.317
string.317 db 59,32,32,32,79,85,84,80,85,84,58,32,114,97,120,32,112,111,105,110,116,115,32,116,111,32,116,104,101,32,110,101,119,108,121,32,97,108,108,111,99,97,116,101,100,32,109,101,109,111,114,121,0,0,0,0
literal.318 dq 9
          dq string.318
string.318 db 97,108,108,111,99,97,116,101,58,0,0,0,0,0,0,0
literal.319 dq 67
          dq string.319
string.319 db 32,32,32,32,115,117,98,32,32,32,32,32,114,115,112,44,32,49,54,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,97,108,108,111,99,97,116,101,32,50,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.320 dq 20
          dq string.320
string.320 db 32,32,32,32,59,32,116,48,32,60,45,32,104,101,97,112,95,112,111,115,0,0,0,0
literal.321 dq 33
          dq string.321
string.321 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,104,101,97,112,95,112,111,115,93,0,0,0,0,0,0,0
literal.322 dq 36
          dq string.322
string.322 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,48,93,44,32,114,97,120,0,0,0,0
literal.323 dq 20
          dq string.323
string.323 db 32,32,32,32,59,32,116,49,32,60,45,32,116,48,32,43,32,114,100,105,0,0,0,0
literal.324 dq 36
          dq string.324
string.324 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,48,93,0,0,0,0
literal.325 dq 20
          dq string.325
string.325 db 32,32,32,32,97,100,100,32,32,32,32,32,114,97,120,44,32,114,100,105,0,0,0,0
literal.326 dq 36
          dq string.326
string.326 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,49,93,44,32,114,97,120,0,0,0,0
literal.327 dq 10
          dq string.327
string.327 db 46,97,108,108,111,99,95,100,111,58,0,0,0,0,0,0
literal.328 dq 24
          dq string.328
string.328 db 32,32,32,32,59,32,99,109,112,32,116,49,32,60,61,32,104,101,97,112,95,101,110,100,0,0,0,0,0,0,0,0
literal.329 dq 36
          dq string.329
string.329 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,49,93,0,0,0,0
literal.330 dq 33
          dq string.330
string.330 db 32,32,32,32,99,109,112,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,104,101,97,112,95,101,110,100,93,0,0,0,0,0,0,0
literal.331 dq 21
          dq string.331
string.331 db 32,32,32,32,106,108,101,32,32,32,32,32,46,97,108,108,111,99,95,111,107,0,0,0
literal.332 dq 60
          dq string.332
string.332 db 32,32,32,32,97,100,100,32,32,32,32,32,114,100,105,44,32,91,104,101,97,112,95,101,110,100,93,32,32,32,32,32,32,32,32,32,32,32,32,59,32,110,101,119,32,101,110,100,32,111,102,32,116,104,101,32,104,101,97,112,0,0,0,0
literal.333 dq 69
          dq string.333
string.333 db 32,32,32,32,109,111,118,32,32,32,32,32,91,104,101,97,112,95,101,110,100,93,44,32,114,97,120,32,32,32,32,32,32,32,32,32,32,32,32,59,32,115,97,118,101,32,116,104,101,32,110,101,119,32,101,110,100,32,111,102,32,116,104,101,32,104,101,97,112,0,0,0
literal.334 dq 21
          dq string.334
string.334 db 32,32,32,32,106,109,112,32,32,32,32,32,46,97,108,108,111,99,95,100,111,0,0,0
literal.335 dq 10
          dq string.335
string.335 db 46,97,108,108,111,99,95,111,107,58,0,0,0,0,0,0
literal.336 dq 20
          dq string.336
string.336 db 32,32,32,32,59,32,104,101,97,112,95,112,111,115,32,60,45,32,116,49,0,0,0,0
literal.337 dq 33
          dq string.337
string.337 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,104,101,97,112,95,112,111,115,93,44,32,114,97,120,0,0,0,0,0,0,0
literal.338 dq 15
          dq string.338
string.338 db 32,32,32,32,59,32,114,101,116,117,114,110,32,116,48,0
literal.339 dq 67
          dq string.339
string.339 db 32,32,32,32,97,100,100,32,32,32,32,32,114,115,112,44,32,49,54,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,100,101,97,108,108,111,99,97,116,101,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.340 dq 5
          dq string.340
string.340 db 59,32,100,117,112,0,0,0
literal.341 dq 14
          dq string.341
string.341 db 59,32,32,32,73,78,80,85,84,58,32,40,97,41,0,0
literal.342 dq 18
          dq string.342
string.342 db 59,32,32,32,79,85,84,80,85,84,58,32,40,97,44,32,97,41,0,0,0,0,0,0
literal.343 dq 4
          dq string.343
string.343 db 58,32,59,32,0,0,0,0
literal.344 dq 27
          dq string.344
string.344 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,101,101,107,95,97,100,100,114,0,0,0,0,0
literal.345 dq 5
          dq string.345
string.345 db 59,32,115,119,112,0,0,0
literal.346 dq 17
          dq string.346
string.346 db 59,32,32,32,73,78,80,85,84,58,32,40,97,44,32,98,41,0,0,0,0,0,0,0
literal.347 dq 18
          dq string.347
string.347 db 59,32,32,32,79,85,84,80,85,84,58,32,40,98,44,32,97,41,0,0,0,0,0,0
literal.348 dq 13
          dq string.348
string.348 db 32,32,32,32,59,32,116,48,32,60,45,32,65,0,0,0
literal.349 dq 13
          dq string.349
string.349 db 32,32,32,32,59,32,116,49,32,60,45,32,66,0,0,0
literal.350 dq 12
          dq string.350
string.350 db 32,32,32,32,59,32,112,117,115,104,32,65,0,0,0,0
literal.351 dq 30
          dq string.351
string.351 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,91,114,98,112,32,45,32,108,111,99,95,48,93,0,0
literal.352 dq 12
          dq string.352
string.352 db 32,32,32,32,59,32,112,117,115,104,32,66,0,0,0,0
literal.353 dq 30
          dq string.353
string.353 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,91,114,98,112,32,45,32,108,111,99,95,49,93,0,0
literal.354 dq 5
          dq string.354
string.354 db 59,32,114,111,116,0,0,0
literal.355 dq 20
          dq string.355
string.355 db 59,32,32,32,73,78,80,85,84,58,32,40,97,44,32,98,44,32,99,41,0,0,0,0
literal.356 dq 21
          dq string.356
string.356 db 59,32,32,32,79,85,84,80,85,84,58,32,40,98,44,32,99,44,32,97,41,0,0,0
literal.357 dq 67
          dq string.357
string.357 db 32,32,32,32,115,117,98,32,32,32,32,32,114,115,112,44,32,51,50,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,97,108,108,111,99,97,116,101,32,52,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.358 dq 24
          dq string.358
string.358 db 32,32,32,32,59,32,40,67,32,66,32,65,41,32,45,62,32,40,66,32,65,32,67,41,0,0,0,0,0,0,0,0
literal.359 dq 13
          dq string.359
string.359 db 32,32,32,32,59,32,116,50,32,60,45,32,67,0,0,0
literal.360 dq 36
          dq string.360
string.360 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,50,93,44,32,114,97,120,0,0,0,0
literal.361 dq 12
          dq string.361
string.361 db 32,32,32,32,59,32,112,117,115,104,32,67,0,0,0,0
literal.362 dq 30
          dq string.362
string.362 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,91,114,98,112,32,45,32,108,111,99,95,50,93,0,0
literal.363 dq 67
          dq string.363
string.363 db 32,32,32,32,97,100,100,32,32,32,32,32,114,115,112,44,32,51,50,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,100,101,97,108,108,111,99,97,116,101,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.364 dq 6
          dq string.364
string.364 db 59,32,114,111,116,52,0,0
literal.365 dq 23
          dq string.365
string.365 db 59,32,32,32,73,78,80,85,84,58,32,40,97,44,32,98,44,32,99,44,32,100,41,0
literal.366 dq 24
          dq string.366
string.366 db 59,32,32,32,79,85,84,80,85,84,58,32,40,98,44,32,99,44,32,100,44,32,97,41,0,0,0,0,0,0,0,0
literal.367 dq 28
          dq string.367
string.367 db 32,32,32,32,59,32,40,68,32,67,32,66,32,65,41,32,45,62,32,40,67,32,66,32,65,32,68,41,0,0,0,0
literal.368 dq 13
          dq string.368
string.368 db 32,32,32,32,59,32,116,51,32,60,45,32,68,0,0,0
literal.369 dq 36
          dq string.369
string.369 db 32,32,32,32,109,111,118,32,32,32,32,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,51,93,44,32,114,97,120,0,0,0,0
literal.370 dq 12
          dq string.370
string.370 db 32,32,32,32,59,32,112,117,115,104,32,68,0,0,0,0
literal.371 dq 30
          dq string.371
string.371 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,91,114,98,112,32,45,32,108,111,99,95,51,93,0,0
literal.372 dq 5
          dq string.372
string.372 db 59,32,112,111,112,0,0,0
literal.373 dq 14
          dq string.373
string.373 db 59,32,32,32,79,85,84,80,85,84,58,32,40,41,0,0
literal.374 dq 6
          dq string.374
string.374 db 59,32,112,105,99,107,0,0
literal.375 dq 16
          dq string.375
string.375 db 59,32,32,32,73,78,80,85,84,58,32,40,105,110,116,41,0,0,0,0,0,0,0,0
literal.376 dq 17
          dq string.376
string.376 db 59,32,32,32,79,85,84,80,85,84,58,32,40,112,116,114,41,0,0,0,0,0,0,0
literal.377 dq 27
          dq string.377
string.377 db 32,32,32,32,99,97,108,108,32,32,32,32,115,116,97,99,107,95,112,105,99,107,95,97,100,100,114,0,0,0,0,0
literal.378 dq 6
          dq string.378
string.378 db 59,32,112,108,117,115,0,0
literal.379 dq 21
          dq string.379
string.379 db 59,32,32,32,73,78,80,85,84,58,32,40,105,110,116,44,32,105,110,116,41,0,0,0
literal.380 dq 17
          dq string.380
string.380 db 59,32,32,32,79,85,84,80,85,84,58,32,40,105,110,116,41,0,0,0,0,0,0,0
literal.381 dq 15
          dq string.381
string.381 db 32,32,32,32,112,117,115,104,32,32,32,32,114,97,120,0
literal.382 dq 5
          dq string.382
string.382 db 59,32,115,117,98,0,0,0
literal.383 dq 15
          dq string.383
string.383 db 32,32,32,32,112,111,112,32,32,32,32,32,114,97,120,0
literal.384 dq 20
          dq string.384
string.384 db 32,32,32,32,115,117,98,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.385 dq 5
          dq string.385
string.385 db 59,32,109,117,108,0,0,0
literal.386 dq 15
          dq string.386
string.386 db 32,32,32,32,109,117,108,32,32,32,32,32,114,100,105,0
literal.387 dq 5
          dq string.387
string.387 db 59,32,100,105,118,0,0,0
literal.388 dq 7
          dq string.388
string.388 db 32,32,32,32,99,113,111,0
literal.389 dq 15
          dq string.389
string.389 db 32,32,32,32,105,100,105,118,32,32,32,32,114,100,105,0
literal.390 dq 5
          dq string.390
string.390 db 59,32,109,111,100,0,0,0
literal.391 dq 20
          dq string.391
string.391 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,114,100,120,0,0,0,0
literal.392 dq 5
          dq string.392
string.392 db 59,32,97,110,100,0,0,0
literal.393 dq 20
          dq string.393
string.393 db 32,32,32,32,97,110,100,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.394 dq 4
          dq string.394
string.394 db 59,32,111,114,0,0,0,0
literal.395 dq 20
          dq string.395
string.395 db 32,32,32,32,111,114,32,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.396 dq 5
          dq string.396
string.396 db 59,32,120,111,114,0,0,0
literal.397 dq 20
          dq string.397
string.397 db 32,32,32,32,120,111,114,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.398 dq 5
          dq string.398
string.398 db 59,32,115,104,114,0,0,0
literal.399 dq 15
          dq string.399
string.399 db 32,32,32,32,112,111,112,32,32,32,32,32,114,99,120,0
literal.400 dq 18
          dq string.400
string.400 db 32,32,32,32,115,104,114,32,32,32,32,32,97,120,44,32,99,108,0,0,0,0,0,0
literal.401 dq 5
          dq string.401
string.401 db 59,32,115,104,108,0,0,0
literal.402 dq 18
          dq string.402
string.402 db 32,32,32,32,115,104,108,32,32,32,32,32,97,120,44,32,99,108,0,0,0,0,0,0
literal.403 dq 14
          dq string.403
string.403 db 59,32,103,114,101,97,116,101,114,32,116,104,97,110,0,0
literal.404 dq 18
          dq string.404
string.404 db 59,32,32,32,79,85,84,80,85,84,58,32,40,98,111,111,108,41,0,0,0,0,0,0
literal.405 dq 20
          dq string.405
string.405 db 32,32,32,32,99,109,112,32,32,32,32,32,114,100,105,44,32,114,97,120,0,0,0,0
literal.406 dq 14
          dq string.406
string.406 db 32,32,32,32,115,101,116,103,32,32,32,32,97,108,0,0
literal.407 dq 17
          dq string.407
string.407 db 32,32,32,32,97,110,100,32,32,32,32,32,97,108,44,32,49,0,0,0,0,0,0,0
literal.408 dq 19
          dq string.408
string.408 db 32,32,32,32,109,111,118,122,120,32,32,32,114,97,120,44,32,97,108,0,0,0,0,0
literal.409 dq 11
          dq string.409
string.409 db 59,32,108,101,115,115,32,116,104,97,110,0,0,0,0,0
literal.410 dq 14
          dq string.410
string.410 db 32,32,32,32,115,101,116,108,32,32,32,32,97,108,0,0
literal.411 dq 14
          dq string.411
string.411 db 32,32,32,32,115,101,116,101,32,32,32,32,97,108,0,0
literal.412 dq 17
          dq string.412
string.412 db 59,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,101,0,0,0,0,0,0,0
literal.413 dq 15
          dq string.413
string.413 db 59,32,109,101,109,111,114,121,32,111,102,102,115,101,116,0
literal.414 dq 21
          dq string.414
string.414 db 59,32,32,32,73,78,80,85,84,58,32,40,112,116,114,44,32,105,110,116,41,0,0,0
literal.415 dq 67
          dq string.415
string.415 db 32,32,32,32,115,117,98,32,32,32,32,32,114,115,112,44,32,50,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,97,108,108,111,99,97,116,101,32,51,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.416 dq 15
          dq string.416
string.416 db 32,32,32,32,59,32,116,49,32,60,45,32,105,110,116,0
literal.417 dq 15
          dq string.417
string.417 db 32,32,32,32,59,32,116,50,32,60,45,32,112,116,114,0
literal.418 dq 22
          dq string.418
string.418 db 32,32,32,32,59,32,112,116,114,91,48,93,32,60,45,32,98,121,116,101,32,97,0,0
literal.419 dq 36
          dq string.419
string.419 db 32,32,32,32,109,111,118,32,32,32,32,32,114,97,120,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,50,93,0,0,0,0
literal.420 dq 36
          dq string.420
string.420 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,49,93,0,0,0,0
literal.421 dq 67
          dq string.421
string.421 db 32,32,32,32,97,100,100,32,32,32,32,32,114,115,112,44,32,50,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,100,101,97,108,108,111,99,97,116,101,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0
literal.422 dq 13
          dq string.422
string.422 db 59,32,109,101,109,111,114,121,32,99,111,112,121,0,0,0
literal.423 dq 26
          dq string.423
string.423 db 59,32,32,32,73,78,80,85,84,58,32,40,100,115,116,44,32,115,114,99,44,32,108,101,110,41,0,0,0,0,0,0
literal.424 dq 15
          dq string.424
string.424 db 32,32,32,32,59,32,116,48,32,60,45,32,108,101,110,0
literal.425 dq 15
          dq string.425
string.425 db 32,32,32,32,59,32,116,49,32,60,45,32,115,114,99,0
literal.426 dq 15
          dq string.426
string.426 db 32,32,32,32,59,32,116,50,32,60,45,32,100,115,116,0
literal.427 dq 36
          dq string.427
string.427 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,50,93,0,0,0,0
literal.428 dq 36
          dq string.428
string.428 db 32,32,32,32,109,111,118,32,32,32,32,32,114,115,105,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,49,93,0,0,0,0
literal.429 dq 36
          dq string.429
string.429 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,120,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,48,93,0,0,0,0
literal.430 dq 11
          dq string.430
string.430 db 46,110,101,120,116,95,98,121,116,101,58,0,0,0,0,0
literal.431 dq 54
          dq string.431
string.431 db 32,32,32,32,99,109,112,32,32,32,32,32,114,100,120,44,32,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,99,104,101,99,107,32,105,102,32,100,111,110,101,0,0
literal.432 dq 17
          dq string.432
string.432 db 32,32,32,32,106,108,101,32,32,32,32,32,46,100,111,110,101,0,0,0,0,0,0,0
literal.433 dq 59
          dq string.433
string.433 db 32,32,32,32,109,111,118,32,32,32,32,32,97,108,44,32,98,121,116,101,32,91,114,115,105,93,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,103,101,116,32,98,121,116,101,32,102,114,111,109,32,115,101,108,102,0,0,0,0,0
literal.434 dq 64
          dq string.434
string.434 db 32,32,32,32,109,111,118,32,32,32,32,32,98,121,116,101,32,91,114,100,105,93,44,32,97,108,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,99,111,112,121,32,98,121,116,101,32,116,111,32,110,101,119,32,111,98,106,101,99,116,0,0,0,0,0,0,0,0
literal.435 dq 62
          dq string.435
string.435 db 32,32,32,32,105,110,99,32,32,32,32,32,114,100,105,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,105,110,99,114,101,109,101,110,116,32,100,101,115,116,105,110,97,116,105,111,110,0,0
literal.436 dq 57
          dq string.436
string.436 db 32,32,32,32,105,110,99,32,32,32,32,32,114,115,105,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,105,110,99,114,101,109,101,110,116,32,115,111,117,114,99,101,0,0,0,0,0,0,0
literal.437 dq 56
          dq string.437
string.437 db 32,32,32,32,100,101,99,32,32,32,32,32,114,100,120,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,32,100,101,99,114,101,109,101,110,116,32,99,111,117,110,116,0,0,0,0,0,0,0,0
literal.438 dq 18
          dq string.438
string.438 db 32,32,32,32,106,109,112,32,46,110,101,120,116,95,98,121,116,101,0,0,0,0,0,0
literal.439 dq 6
          dq string.439
string.439 db 46,100,111,110,101,58,0,0
literal.440 dq 16
          dq string.440
string.440 db 32,32,32,32,59,32,100,101,114,101,102,32,100,97,116,97,0,0,0,0,0,0,0,0
literal.441 dq 22
          dq string.441
string.441 db 32,32,32,32,59,32,103,101,116,32,101,110,118,32,118,97,114,115,32,112,116,114,0,0
literal.442 dq 34
          dq string.442
string.442 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,113,119,111,114,100,32,91,115,116,97,99,107,95,101,110,118,93,0,0,0,0,0,0
literal.443 dq 10
          dq string.443
string.443 db 59,32,115,121,115,99,97,108,108,49,0,0,0,0,0,0
literal.444 dq 19
          dq string.444
string.444 db 59,32,32,32,73,78,80,85,84,58,32,40,97,44,32,105,110,116,41,0,0,0,0,0
literal.445 dq 15
          dq string.445
string.445 db 32,32,32,32,59,32,116,48,32,60,45,32,105,110,116,0
literal.446 dq 13
          dq string.446
string.446 db 32,32,32,32,59,32,116,49,32,60,45,32,97,0,0,0
literal.447 dq 21
          dq string.447
string.447 db 32,32,32,32,59,32,115,121,115,99,97,108,108,49,40,116,48,41,32,116,49,0,0,0
literal.448 dq 10
          dq string.448
string.448 db 59,32,115,121,115,99,97,108,108,51,0,0,0,0,0,0
literal.449 dq 25
          dq string.449
string.449 db 59,32,32,32,73,78,80,85,84,58,32,40,97,44,32,98,44,32,99,44,32,105,110,116,41,0,0,0,0,0,0,0
literal.450 dq 13
          dq string.450
string.450 db 32,32,32,32,59,32,116,49,32,60,45,32,99,0,0,0
literal.451 dq 13
          dq string.451
string.451 db 32,32,32,32,59,32,116,50,32,60,45,32,98,0,0,0
literal.452 dq 13
          dq string.452
string.452 db 32,32,32,32,59,32,116,51,32,60,45,32,97,0,0,0
literal.453 dq 27
          dq string.453
string.453 db 32,32,32,32,59,32,115,121,115,99,97,108,108,51,40,116,48,41,32,116,51,32,116,50,32,116,49,0,0,0,0,0
literal.454 dq 36
          dq string.454
string.454 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,105,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,51,93,0,0,0,0
literal.455 dq 36
          dq string.455
string.455 db 32,32,32,32,109,111,118,32,32,32,32,32,114,115,105,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,50,93,0,0,0,0
literal.456 dq 36
          dq string.456
string.456 db 32,32,32,32,109,111,118,32,32,32,32,32,114,100,120,44,32,113,119,111,114,100,32,91,114,98,112,32,45,32,108,111,99,95,49,93,0,0,0,0
literal.457 dq 1
          dq string.457
string.457 db 57,0,0,0,0,0,0,0
literal.458 dq 1
          dq string.458
string.458 db 56,0,0,0,0,0,0,0
literal.459 dq 1
          dq string.459
string.459 db 55,0,0,0,0,0,0,0
literal.460 dq 1
          dq string.460
string.460 db 54,0,0,0,0,0,0,0
literal.461 dq 1
          dq string.461
string.461 db 53,0,0,0,0,0,0,0
literal.462 dq 1
          dq string.462
string.462 db 52,0,0,0,0,0,0,0
literal.463 dq 1
          dq string.463
string.463 db 51,0,0,0,0,0,0,0
literal.464 dq 1
          dq string.464
string.464 db 50,0,0,0,0,0,0,0
literal.465 dq 48
literal.466 dq 60
literal.467 dq 1
          dq string.467
string.467 db 119,0,0,0,0,0,0,0
literal.468 dq 64
literal.469 dq 420
literal.470 dq 1024
literal.471 dq 32
literal.472 dq 33
literal.473 dq 35
literal.474 dq 36
literal.475 dq 37
literal.476 dq 38
literal.477 dq 39
literal.478 dq 42
literal.479 dq 43
literal.480 dq 46
literal.481 dq 47
literal.482 dq 58
literal.483 dq 59
literal.484 dq 61
literal.485 dq 62
literal.486 dq 63
literal.487 dq 91
literal.488 dq 93
literal.489 dq 94
literal.490 dq 95
literal.491 dq 96
literal.492 dq 123
literal.493 dq 124
literal.494 dq 125
literal.495 dq 126
literal.496 dq 57
literal.497 dq 65
literal.498 dq 90
literal.499 dq 97
literal.500 dq 122
